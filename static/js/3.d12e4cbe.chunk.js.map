{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","assets/images/lookingForAJob.jpg","assets/images/notLookingForAJob.jpg","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useEffect","setStatus","status","useState","editMode","setEditMode","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","onDoubleClick","ProfileInfo","profile","className","classes","descriptionBlock","src","photos","large","alt","aboutMe","lookingForAJob","job","noJob","lookingForAJobDescription","Preloader","Post","key","id","item","message","likesCount","maxLength10","maxLengthCreator","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","React","memo","console","log","post","postsData","reverse","map","postsBlock","values","addPost","newPostText","posts","connect","state","profilePage","dispatch","addPostAC","Profile","MyPostsContainer","ProfileContainer","document","title","userId","this","match","params","authorizedUserId","toString","getUserProfile","getUserStatus","Component","compose","withAuthRedirect","withRouter","auth","isAuth","getUserProfileTC","getUserStatusTC","updateStatusTC"],"mappings":"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","file":"static/js/3.d12e4cbe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3qxPW\"};","module.exports = __webpack_public_path__ + \"static/media/lookingForAJob.9d32f7ca.jpg\";","module.exports = __webpack_public_path__ + \"static/media/notLookingForAJob.a98dd7aa.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3zf98\",\"posts\":\"MyPosts_posts__2ZcJR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1evpY\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus: React.FC<ProfileStatusType> = (props) => {\r\n    //синхронизируй компоненту с состоянием, когда меняется props.status\r\n    useEffect(() => setStatus(props.status), [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        //отправляем в глобал стейт и на сервак, выходя из editMode\r\n        props.updateUserStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    return (\r\n      <>\r\n          {editMode\r\n            ? <div>\r\n                <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            : <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"empty status\"}</span>\r\n            </div>}\r\n      </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport job from \"../../../assets/images/lookingForAJob.jpg\"\r\nimport noJob from \"../../../assets/images/notLookingForAJob.jpg\"\r\nimport { ProfileStatus } from './ProfileStatus';\r\n\r\ntype ProfileInfoType = {\r\n    profile: any\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoType) {\r\n    //наш профиль в иниц стейте = null, поэтому когда он null рисуем колесо\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n      <div>\r\n          <div className={classes.descriptionBlock}>\r\n              <img src={props.profile.photos.large} alt={\"something wrong\"}/>\r\n              <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n              <span>{props.profile.aboutMe}</span>\r\n          </div>\r\n          <div>\r\n              {props.profile.lookingForAJob ? <img src={job} alt={\"alt\"}/> : <img src={noJob} alt={\"alt\"}/>}\r\n              <span>{props.profile.lookingForAJobDescription}</span>\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import classes from \"../Post/Post.module.css\";\r\nimport React from \"react\";\r\nimport { PostTypes } from \"../../../../redux/profile-reducer\";\r\n\r\nconst Post = (props: PostTypes) => {\r\n  return (\r\n    <div key={props.id} className={classes.item}>\r\n      <img src=\"https://i.ibb.co/0t8zmD0/pngwing-com.png\" alt=\"avatar\" />\r\n      {props.message}\r\n      <div>\r\n        <span>{props.likesCount} likes</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Post;\r\n","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\n//validator for Field from another file\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators\";\r\nimport {Textarea} from \"../../../common/FormsWithValidationErrors/FormsWithValidationErrors\";\r\n\r\n//вызываем за компонентой, т.к. каждый раз приходит новая функция и зацикливается перерисовка(нет useCallback)\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddPostForm: React.FC = (props: any) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea} name='newPostText' placeholder=\"Type a new post\" validate={[required, maxLength10]}/>\r\n        <button>Add post</button>\r\n    </form>\r\n}\r\n\r\nexport const AddPostFormRedux = reduxForm({\r\n    form: \"addPostForm\"\r\n})(AddPostForm)","import React from \"react\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {PostTypes} from \"../../../redux/profile-reducer\";\r\nimport {AddPostFormRedux} from \"./AddPostForm/AddPostForm\";\r\n\r\ntype MyPostsPropsType = {\r\n    postsData: Array<PostTypes>\r\n    addPost: (newPostText: string) => void\r\n};\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = React.memo((props) => {\r\n    console.log(\"Render\")\r\n    let addNewPost = (values: any) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    let post = [...props.postsData]\r\n      //reverse мутабельный метод массива(не делает копию, а меняет изначальный массив по ссылке)\r\n      //поэтому создаем копию\r\n      .reverse()\r\n      .map(post =>\r\n        <Post id={post.id}\r\n              key={post.id}\r\n              message={post.message}\r\n              likesCount={post.likesCount}/>)\r\n    return (\r\n      <div className={classes.postsBlock}>\r\n          <h3>My Posts</h3>\r\n          <AddPostFormRedux onSubmit={addNewPost}/>\r\n          <div className={classes.posts}>{post}</div>\r\n      </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;\r\n","import {addPostAC} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionsType, RootStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n        //перерисуйся, когда что-то из этого изменится\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: (action: ActionsType) => void) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        },\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: any\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {getUserProfileTC, getUserStatusTC, updateStatusTC} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n//типы объектов с серва (то, что должен возвращать MStP\r\ntype profileContactsServerType = {\r\n    github: string | null\r\n    vk: string | null\r\n    facebook: string | null\r\n    instagram: string | null\r\n    twitter: string | null\r\n    website: string | null\r\n    youtube: string | null\r\n    mainLink: string | null\r\n}\r\ntype profilePhotosServerType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\ntype profileServerType = {\r\n    aboutMe: string | null\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string\r\n    contacts: profileContactsServerType\r\n    photos: profilePhotosServerType\r\n}\r\nexport type MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: profileServerType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PathParamType = {\r\n    userId: string | undefined\r\n}\r\ntype PropsType = RouteComponentProps<PathParamType> & OwnPropsType\r\n\r\n\r\n//1-ый контейнер для AJAX запросов, setInterval и т.д. (грязной работы), рисует презентационную\r\nclass ProfileContainer extends React.Component<PropsType, any> {\r\n\r\n    componentDidMount() {\r\n        document.title = \"Profile\";\r\n        //айди из URL (withRouter, Route)\r\n        let userId = this.props.match.params.userId;\r\n        //если параметра userId нет (url выглядит как /profile/), то вставить айди, пришедший с сервака\r\n        //если и он null, то \"\" (временно)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId ? this.props.authorizedUserId.toString() : \"\"\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        //копирует и передает все пропсы\r\n        return <Profile {...this.props}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateUserStatus={this.props.updateUserStatus}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\nlet mapDispatchToProps = (dispatch: any): MapDispatchToPropsType => ({\r\n    getUserProfile: (userId) => {\r\n        dispatch(getUserProfileTC(userId))\r\n    },\r\n    getUserStatus: (userId) => {\r\n        dispatch(getUserStatusTC(userId))\r\n    },\r\n    updateUserStatus: (status) => {\r\n        dispatch(updateStatusTC(status))\r\n    }\r\n})\r\n\r\nexport default compose(\r\n  withAuthRedirect,\r\n  withRouter,\r\n  connect(mapStateToProps, mapDispatchToProps)\r\n)(ProfileContainer)"],"sourceRoot":""}