{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx"],"names":["module","exports","DialogItem","props","className","classes","dialog","to","id","src","avatar","alt","name","Message","key","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","withAuthRedirect","dialogsData","useSelector","state","dialogsPage","messagesData","dispatch","useDispatch","dialogElements","map","dialogItem","messageElements","messageItem","dialogs","dialogsItem","messages","values","addMessageAC","newMessageText","compose"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sFCKnKC,EAAkC,SAACC,GAAD,OAC7C,yBAAKC,UAAWC,IAAQC,QACpB,kBAAC,IAAD,CAASC,GAAE,mBAAcJ,EAAMK,KAAM,yBAAKC,IAAKN,EAAMO,OAAQC,IAAI,WAAWR,EAAMS,QCH3EC,EAA+B,SAACV,GAAD,OAC1C,yBAAKW,IAAKX,EAAMK,GACXJ,UAAWC,IAAQU,SAAUZ,EAAMY,U,mCCDpCC,EAAeC,YAAiB,KAYzBC,EAAsBC,YACjC,CAACC,KAAM,wBAD0BD,EAPsD,SAAChB,GACtF,OAAO,0BAAMkB,SAAUlB,EAAMmB,cACzB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUb,KAAK,iBAAiBc,YAAY,iBACvDC,SAAU,CAACC,IAAUZ,KAC5B,4C,kCCFFa,EAAoBC,aAAiB,WACvC,IAAMC,EAAcC,aAAkD,SAAAC,GAAK,OAAIA,EAAMC,YAAYH,eAC3FI,EAAeH,aAA+C,SAAAC,GAAK,OAAIA,EAAMC,YAAYC,gBAEzFC,EAAWC,cAMbC,EAAiBP,EAAYQ,KAAI,SAAAC,GAAU,OAAI,kBAAC,EAAD,CAAY5B,KAAM4B,EAAW5B,KACjBJ,GAAIgC,EAAWhC,GACfM,IAAK0B,EAAWhC,GAChBE,OAAQ8B,EAAW9B,YAC9E+B,EAAkBN,EAAaI,KAAI,SAAAG,GAAW,OAAI,kBAAC,EAAD,CAASlC,GAAIkC,EAAYlC,GAAIO,QAAS2B,EAAY3B,QACzCD,IAAK4B,EAAYlC,QAEhF,OACI,yBAAKJ,UAAWC,IAAQsC,SACpB,yBAAKvC,UAAWC,IAAQuC,aACnBN,GAEL,yBAAKlC,UAAWC,IAAQwC,UACnBJ,GAEL,kBAACvB,EAAD,CAAqBG,SApBP,SAACyB,GACnBV,EAASW,YAAaD,EAAOE,wBAwBtBC,sBAA6BnB,IAA7BmB,CAA+CpB","file":"static/js/4.73879bde.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__QfXpA\",\"dialogsItem\":\"Dialogs_dialogsItem__3ahhS\",\"dialog\":\"Dialogs_dialog__1Tacg\",\"messages\":\"Dialogs_messages__2gg1W\",\"message\":\"Dialogs_message__oBKpv\"};","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogItemType} from \"../../../types/commonTypes\";\r\n\r\ntype PropsType = DialogItemType\r\nexport const DialogItem: React.FC<PropsType> = (props) => (\r\n  <div className={classes.dialog}>\r\n      <NavLink to={`/dialogs/${props.id}`}><img src={props.avatar} alt=\"avatar\"/>{props.name}</NavLink>\r\n  </div>\r\n)\r\n","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\";\r\nimport {MessageType} from \"../../../types/commonTypes\";\r\n\r\ntype PropsType = MessageType\r\nexport const Message: React.FC<PropsType> = (props) =>\r\n  <div key={props.id}\r\n       className={classes.message}>{props.message}\r\n  </div>;\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React, {FC} from \"react\";\r\nimport {Textarea} from \"../../common/FormsWithValidationErrors/FormsWithValidationErrors\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\n\r\n//вызываем за компонентой, т.к. каждый раз приходит новая функция и зацикливается перерисовка(нет useCallback)\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\ntype NewMessageFormType = { newMessageText: string }\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: FC<InjectedFormProps<NewMessageFormType, PropsType> & PropsType> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea} name='newMessageText' placeholder=\"Type a message\"\r\n               validate={[required, maxLength100]}/>\r\n        <button>Send</button>\r\n    </form>\r\n}\r\nexport const AddMessageFormRedux = reduxForm<NewMessageFormType & PropsType>(\r\n  {form: \"dialogAddMessageForm\"}\r\n)(AddMessageForm)","import React from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport {DialogItem} from './DialogItem/DialogsItem'\r\nimport {Message} from './Message/Message'\r\nimport {AddMessageFormRedux} from './AddMessageForm/AddMessageForm'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {RootStateType} from '../../redux/store'\r\nimport {DialogItemType, MessageType} from '../../types/commonTypes'\r\nimport {addMessageAC} from '../../redux/dialogs-reducer'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport {compose} from 'redux'\r\n\r\n\r\nconst Dialogs: React.FC = withAuthRedirect(() => {\r\n    const dialogsData = useSelector<RootStateType, Array<DialogItemType>>(state => state.dialogsPage.dialogsData)\r\n    const messagesData = useSelector<RootStateType, Array<MessageType>>(state => state.dialogsPage.messagesData)\r\n\r\n    const dispatch = useDispatch()\r\n    const addNewMessage = (values: { newMessageText: string }) => {\r\n        dispatch(addMessageAC(values.newMessageText))\r\n    }\r\n\r\n    /*mapping of dialogs and messages*/\r\n    let dialogElements = dialogsData.map(dialogItem => <DialogItem name={dialogItem.name}\r\n                                                                   id={dialogItem.id}\r\n                                                                   key={dialogItem.id}\r\n                                                                   avatar={dialogItem.avatar}/>)\r\n    let messageElements = messagesData.map(messageItem => <Message id={messageItem.id} message={messageItem.message}\r\n                                                                   key={messageItem.id}/>)\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItem}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messageElements}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default compose<React.ComponentType>(withAuthRedirect)(Dialogs)"],"sourceRoot":""}