{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","classes","dialog","to","id","src","avatar","alt","name","Message","key","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","state","dialogsPage","dialogElements","dialogsData","map","dialogItem","messageElements","messagesData","messageItem","dialogs","dialogsItem","messages","values","sendMessage","newMessageText","compose","withAuthRedirect","connect","dispatch","addMessageAC"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCYjKC,MARf,SAAoBC,GAClB,OACE,yBAAKC,UAAWC,IAAQC,QACtB,kBAAC,IAAD,CAASC,GAAE,mBAAcJ,EAAMK,KAAM,yBAAKC,IAAKN,EAAMO,OAAQC,IAAI,WAAWR,EAAMS,QCAzEC,MAJf,SAAiBV,GACf,OAAO,yBAAKW,IAAKX,EAAMK,GAAIJ,UAAWC,IAAQU,SAAUZ,EAAMY,U,kCCG1DC,EAAeC,YAAiB,KAQzBC,EAAsBC,YACjC,CAACC,KAAM,wBAD0BD,EANF,SAAChB,GAC9B,OAAO,0BAAMkB,SAAUlB,EAAMmB,cACzB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUb,KAAK,iBAAiBc,YAAY,iBAAiBC,SAAU,CAACC,IAAUZ,KACpG,4CCmCOa,MAlCf,SAAiB1B,GAEb,IAAI2B,EAAQ3B,EAAM4B,YAEdC,EAAiBF,EAAMG,YAAYC,KAAI,SAACC,GAC1C,OAAO,kBAAC,EAAD,CAAYvB,KAAMuB,EAAWvB,KACxBJ,GAAI2B,EAAW3B,GACfM,IAAKqB,EAAW3B,GAChBE,OAAQyB,EAAWzB,YAC7B0B,EAAkBN,EAAMO,aAAaH,KAAI,SAAUI,GACnD,OACE,kBAAC,EAAD,CAAS9B,GAAI8B,EAAY9B,GAAIO,QAASuB,EAAYvB,QAASD,IAAKwB,EAAY9B,QASlF,OACE,yBAAKJ,UAAWC,IAAQkC,SACpB,yBAAKnC,UAAWC,IAAQmC,aACnBR,GAEL,yBAAK5B,UAAWC,IAAQoC,UACnBL,GAEL,kBAAClB,EAAD,CAAqBG,SAZP,SAACqB,GACjBvC,EAAMwC,YAAYD,EAAOE,qB,uBCJlBC,sBAEbC,IACAC,aAtBoB,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACiB,GACtB,MAAO,CACHL,YAAa,SAACC,GAEVI,EAASC,YAAaL,SASnBC,CAIbhB","file":"static/js/4.817c2f35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__QfXpA\",\"dialogsItem\":\"Dialogs_dialogsItem__3ahhS\",\"dialog\":\"Dialogs_dialog__1Tacg\",\"messages\":\"Dialogs_messages__2gg1W\",\"message\":\"Dialogs_message__oBKpv\"};","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { DialogItemType } from \"../../../redux/dialogs-reducer\";\r\n\r\nfunction DialogItem(props: DialogItemType) {\r\n  return (\r\n    <div className={classes.dialog}>\r\n      <NavLink to={`/dialogs/${props.id}`}><img src={props.avatar} alt=\"avatar\"/>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\";\r\nimport {MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\nfunction Message(props: MessageType) {\r\n  return <div key={props.id} className={classes.message}>{props.message}</div>;\r\n}\r\n\r\nexport default Message;\r\n","import {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\n//validator for Field from another file\r\nimport {Textarea} from \"../../common/FormsWithValidationErrors/FormsWithValidationErrors\";\r\n\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\n\r\n//вызываем за компонентой, т.к. каждый раз приходит новая функция и зацикливается перерисовка(нет useCallback)\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm: React.FC = (props: any) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea} name='newMessageText' placeholder=\"Type a message\" validate={[required, maxLength100]}/>\r\n        <button>Send</button>\r\n    </form>\r\n}\r\nexport const AddMessageFormRedux = reduxForm(\r\n  {form: \"dialogAddMessageForm\"}\r\n)(AddMessageForm)","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/dialogs-reducer\";\r\nimport {AddMessageFormRedux} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nexport type DialogsPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    updateNewMessageBody: (body: any) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n\r\n    let state = props.dialogsPage\r\n    /*мапим диалоги и сообщения*/\r\n    let dialogElements = state.dialogsData.map((dialogItem) => {\r\n      return <DialogItem name={dialogItem.name}\r\n                  id={dialogItem.id}\r\n                  key={dialogItem.id}\r\n                  avatar={dialogItem.avatar}/>})\r\n    let messageElements = state.messagesData.map(function (messageItem) {\r\n        return (\r\n          <Message id={messageItem.id} message={messageItem.message} key={messageItem.id}/>\r\n        )\r\n    })\r\n\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageText);\r\n    }\r\n\r\n    return (\r\n      <div className={classes.dialogs}>\r\n          <div className={classes.dialogsItem}>\r\n              {dialogElements}\r\n          </div>\r\n          <div className={classes.messages}>\r\n              {messageElements}\r\n          </div>\r\n          <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n      </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import {addMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionsType, RootStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        //приходит в стейт ссылка на новый объект(копия), тогда перерисовывает\r\n    }\r\n} //возвращает состояние объектом\r\nlet mapDispatchToProps = (dispatch: (action: ActionsType) => void) => {\r\n    return {\r\n        sendMessage: (newMessageText: string) => {\r\n            //диспатчим, то, что вернул экшн креатор\r\n            dispatch(addMessageAC(newMessageText))\r\n        }\r\n    }\r\n} //возвращает коллбеки объектом\r\n\r\n\r\n//конвеер(возьми Dialogs и оборачивай во всех хуки снизу вверх)\r\n//возьми Dialogs, закинь в функцию withAuthRedirect, а результат этого вызова закинь в вызов connect как бы во вторую его скобку\r\n//и так далее по конвееру\r\nexport default compose(\r\n  // HOC, который добавляет Redirect\r\n  withAuthRedirect,\r\n  connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);"],"sourceRoot":""}