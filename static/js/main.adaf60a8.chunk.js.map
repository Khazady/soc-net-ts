{"version":3,"sources":["assets/images/default-user-avatar.svg","redux/dialogs-reducer.ts","components/Users/Users.module.css","components/common/Preloader/Preloader.module.css","assets/images/preloader.svg","api/api.ts","components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersList.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","components/common/Page404/Page404.tsx","App.tsx","index.tsx","components/common/FormsWithValidationErrors/FormsWithValidationErrors.module.css","components/common/Page404/Page404.module.css","components/common/Preloader/Preloader.tsx","components/common/FormsWithValidationErrors/FormsWithValidationErrors.tsx","utils/validators.ts","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","hoc/withAuthRedirect.tsx","redux/profile-reducer.ts"],"names":["module","exports","initialState","dialogsData","id","name","avatar","messagesData","v1","message","dialogsReducer","state","action","type","newMessage","newMessageText","filter","mess","messageId","addMessageAC","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","followUser","userId","post","unFollowUser","delete","profileAPI","getProfile","getUserStatus","updateStatus","status","put","uploadPhoto","photoFile","formData","FormData","append","updateProfile","changedProfile","authAPI","me","login","email","password","rememberMe","captcha","res","logout","securityAPI","getCaptchaUrl","Navbar","className","classes","nav","item","to","activeClassName","activeLink","News","props","Music","Settings","usersData","totalUsersCount","isLoading","isFollowingInProgress","followSuccessAC","unfollowSuccessAC","toggleIsLoadingAC","toggleFollowingProgressAC","userReducer","map","u","followed","newUsersData","pageNumber","Paginator","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","selectedPage","page","onPageChanger","User","user","src","photos","small","userPhoto","alt","disabled","isFollowedInProgress","some","unfollow","follow","UsersList","users","key","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsLoading","getIsFollowingProgress","UsersContainer","this","Preloader","React","Component","compose","withAuthRedirect","connect","dispatch","a","resultCode","followTC","unfollowTC","toggleFollowingProgress","document","title","items","totalCount","requestUsersTC","Header","header","loginBlock","isAuth","captchaUrl","setAuthUserDataAC","payload","getCaptchaUrlSuccessAC","getAuthUserDataTC","getCaptchaUrlTC","url","auth","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","Field","component","Input","validate","required","placeholder","formSummaryError","captchaInput","errorMessage","messages","length","stopSubmit","_error","initialized","appReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","Suspense","fallback","Page404","s","block","c","_404","_1","_2","btn","href","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","promiseRejectionEvent","alert","initializingApp","addEventListener","removeEventListener","exact","path","render","Login","from","AppContainer","withRouter","promise","Promise","all","MainApp","ReactDOM","getElementById","spinnerContainer","preloader","Textarea","input","meta","hasError","touched","formControl","value","undefined","maxLengthCreator","maxLength","mapStateToPropsForRedirect","RedirectComponent","ADD_POST","postsData","likesCount","profile","newPost","newPostText","postId","addPostAC","setStatusAC","getUserProfile","getStatus","updatePhoto","photo","getState","substring","toLowerCase","reject"],"mappings":"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","file":"static/js/main.adaf60a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-user-avatar.7d927e67.svg\";","import {v1} from \"uuid\";\r\nimport {ActionsType} from \"./redux-store\";\r\n\r\n// types\r\nconst ADD_MESSAGE = \"dialogs/ADD_MESSAGE\"\r\nconst DELETE_MESSAGE = \"dialogs/DELETE_MESSAGE\"\r\nexport type DialogItemType = {\r\n    name: string;\r\n    id: number;\r\n    avatar: string\r\n};\r\nexport type MessageType = {\r\n    id: string\r\n    message: string;\r\n};\r\nexport type DialogsPageType = {\r\n    dialogsData: Array<DialogItemType>;\r\n    messagesData: Array<MessageType>;\r\n};\r\n\r\n\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: \"Chris\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/9/99/Chris_Pratt_2018.jpg\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Vicky\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/c/cf/Victoria_Justice_2013.jpg\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Mike\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Mike_Tyson_2019_by_Glenn_Francis.jpg/1200px-Mike_Tyson_2019_by_Glenn_Francis.jpg\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Alex\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/9/99/Chris_Pratt_2018.jpg\"\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Ivan\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/9/99/Chris_Pratt_2018.jpg\"\r\n        },\r\n    ],\r\n    messagesData: [\r\n        {id: v1(), message: \"Hello\"},\r\n        {id: v1(), message: \"What's up\"},\r\n        {id: v1(), message: \"Privet\"},\r\n        {id: v1(), message: \"Yo\"},\r\n        {id: v1(), message: \"Yo\"},\r\n    ],\r\n};\r\n\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: ActionsType): DialogsPageType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            let newMessage = {id: v1(), message: action.newMessageText}\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, newMessage ]\r\n                //эта запись перезатирает shallow-копию messagesData\r\n                //массив messagesData содержит объекты, мы их глубоко не копируем, т.к. не изменяем\r\n                //dialogsData глубоко не копируем, не собираемся изменять\r\n            };\r\n        case DELETE_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messagesData: state.messagesData.filter(mess => mess.id !== action.messageId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const addMessageAC = (newMessageText: string) => ({type: ADD_MESSAGE, newMessageText} as const)\r\nexport const deleteMessageAC = (messageId: string) => ({type: DELETE_MESSAGE, messageId} as const)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__2-U6B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinnerContainer\":\"Preloader_spinnerContainer__2hnql\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.dacce764.svg\";","import axios from \"axios\";\r\nimport {ProfileFormDataType} from \"../components/Profile/ProfileInfo/ProfileInfo\";\r\n// это DAL\r\n//api pass samurai1809\r\n\r\n//для избежания дублирования кода в каждом запросе\r\n//baseURL вставляется перед каждой строкой\r\n//настройки withCredentials и headers добавляются автоматически\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"a13d3464-2e9e-4272-8cbf-d0d1a9048e02\"\r\n    }\r\n});\r\n\r\n//для удобства разные ветки обращений сортируем по объектам\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        //при get-запросе мы можем отправить на сервер только этот адрес\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n          //тут промис зен, чтобы в компоненту приходил ответ только с data\r\n          .then(response => response.data)\r\n    },\r\n    //в get и delete настройки 2 параметр, в post 3-ий\r\n    followUser(userId: string) {\r\n        return instance.post(`follow/${userId}`, {})\r\n          .then(response => response.data);\r\n    },\r\n    unFollowUser(userId: string) {\r\n        return instance.delete(`follow/${userId}`)\r\n          .then(response => response.data);\r\n    }\r\n};\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/${userId}`)\r\n          .then(response => response.data)\r\n    },\r\n    getUserStatus(userId: string) {\r\n        return instance.get(`profile/status/${userId}`)\r\n          .then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status})\r\n          .then(response => response.data)\r\n    },\r\n    uploadPhoto(photoFile: any) {\r\n        //формируем объект с файлом\r\n        let formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put(`profile/photo`, formData, {\r\n            //меня тип отправляемых данных с json на формдату\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        })\r\n          .then(response => response.data)\r\n    },\r\n    updateProfile(changedProfile: ProfileFormDataType) {\r\n        return instance.put(`profile`, changedProfile)\r\n          .then(response => response.data)\r\n    },\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`).then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha = '') {\r\n        return instance.post('auth/login', {email, password, rememberMe, captcha}).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login').then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`).then()\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3jGhs\",\"item\":\"Navbar_item__L_aKq\",\"activeLink\":\"Navbar_activeLink__NrhWw\"};","import React from 'react';\r\nimport classes from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Navbar () {\r\n    return <nav className={classes.nav}>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/dialogs\" activeClassName={classes.activeLink}>Dialogs</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/users\" activeClassName={classes.activeLink}>Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/settings\" activeClassName={classes.activeLink}>Settings</NavLink>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport classes from \"./News.module.css\";\r\n\r\nfunction News(props: any) {\r\n  return (\r\n    <div>\r\n      News\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport classes from \"./Music.module.css\";\r\n\r\nfunction Music(props: any) {\r\n  return (\r\n    <div>\r\n      Music\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport classes from \"./Settings.module.css\";\r\n\r\nfunction Settings(props: any) {\r\n  return (\r\n    <div>\r\n      Settings\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings;","import {ActionsType} from \"./redux-store\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\n//types\r\ntype LocationType = {\r\n    country: string\r\n    city: string\r\n}\r\nexport type UsersType = {\r\n    id: string\r\n    photos: any\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\nexport type UsersPageType = {\r\n    usersData: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isLoading: boolean\r\n    isFollowingInProgress: any\r\n}\r\nconst FOLLOW = \"user/FOLLOW\";\r\nconst UNFOLLOW = \"user/UNFOLLOW\";\r\nconst SET_USERS = \"user/SET-USERS\";\r\nconst SET_CURRENT_PAGE = \"user/SET-CURRENT-PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"user/SET-TOTAL-USERS-COUNT\"\r\nexport const TOGGLE_IS_LOADING = \"user/TOGGLE-IS-LOADING\"\r\nconst TOGGLE_FOLLOWING_PROGRESS = \"user/TOGGLE_FOLLOWING_PROGRESS\"\r\n\r\nlet initialState: UsersPageType = {\r\n    usersData: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    isFollowingInProgress: []\r\n};\r\nconst userReducer = (state: UsersPageType = initialState, action: ActionsType): UsersPageType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            //этот мап делает копию только того юзера, который нужно изменить, остальное ссылки (Shallow)\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        //делаем копию только того юзера, которого меняем\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n\r\n            //Дополняет инитстейт новыми юзерами, приходящими с сервака по нажатию кнопки show more\r\n            return {\r\n                ...state,\r\n                usersData: action.newUsersData\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.pageNumber}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        }\r\n        case TOGGLE_IS_LOADING: {\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        }\r\n        case TOGGLE_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                isFollowingInProgress: action.isFollowingInProgress\r\n                    //если в action isFollowing true, то в конец массива айдишек(которые были нажаты) дописываем айди из action\r\n                    ? [...state.isFollowingInProgress, action.userId]\r\n                    //если false, то деструкт. не нужна, фильтр возвр. новый массив\r\n                    //удаляет из массивы обрабатывающихся id, ту, что закончила обработку\r\n                    : [state.isFollowingInProgress.filter((id: string) => id !== action.userId)]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const followSuccessAC = (userId: string) => ({type: FOLLOW, userId} as const)\r\nexport const unfollowSuccessAC = (userId: string) => ({type: UNFOLLOW, userId: userId} as const)\r\nexport const setUsersAC = (newUsersData: Array<UsersType>) => ({type: SET_USERS, newUsersData} as const)\r\nexport const setCurrentPageAC = (pageNumber: number) => ({type: SET_CURRENT_PAGE, pageNumber: pageNumber} as const)\r\nexport const setTotalUsersCountAC = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n} as const)\r\nexport const toggleIsLoadingAC = (isLoading: boolean) => ({type: TOGGLE_IS_LOADING, isLoading} as const)\r\nexport const toggleFollowingProgressAC = (isFollowingInProgress: boolean, userId: string) => ({\r\n    type: TOGGLE_FOLLOWING_PROGRESS,\r\n    isFollowingInProgress,\r\n    userId\r\n} as const)\r\n\r\n// thunks\r\n//AC возвращает объект, кот. мы можем задиспатчить, ThunkCreator возвр. функцию кот. мы можем задиспатчить\r\nexport const requestUsersTC = (currentPage: number, pageSize: number) =>\r\n    async (dispatch: any) => {\r\n        document.title = \"Users\";\r\n        //включаем крутилку до запроса на серв\r\n        dispatch(toggleIsLoadingAC(true));\r\n        let response = await usersAPI.getUsers(currentPage, pageSize)\r\n        //после ответа сервера выполнится этот код\r\n        dispatch(setCurrentPageAC(currentPage))\r\n        dispatch(setUsersAC(response.items));\r\n        dispatch(setTotalUsersCountAC(response.totalCount));\r\n        //выключаем после получения ответа\r\n        dispatch(toggleIsLoadingAC(false));\r\n    }\r\n\r\nexport const followTC = (userId: string) =>\r\n    async (dispatch: any) => {\r\n        //меняет в стейте дизаблед кнопки на тру\r\n        dispatch(toggleFollowingProgressAC(true, userId));\r\n        let response = await usersAPI.followUser(userId)\r\n        if (response.resultCode === 0) {\r\n            dispatch(followSuccessAC(userId))\r\n        }\r\n        //разблочивает кнопку после запроса\r\n        dispatch(toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\nexport const unfollowTC = (userId: string) =>\r\n    async (dispatch: any) => {\r\n        //меняет в стейте дизаблед кнопки на тру\r\n        dispatch(toggleFollowingProgressAC(true, userId));\r\n        //дожидаемся когда промис придет в состояние resolved\r\n        let response = await usersAPI.unFollowUser(userId)\r\n        if (response.resultCode === 0) {\r\n            dispatch(unfollowSuccessAC(userId))\r\n        }\r\n        //разблочивает кнопку после запроса\r\n        dispatch(toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\nexport default userReducer;","import styles from \"./Paginator.module.css\";\r\nimport React, {useState} from \"react\";\r\n\r\nexport type PaginatorPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanger: (page: number) => void\r\n    portionSize: number\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorPropsType> = (props) => {\r\n    //логика для визуала, поэтому она в презентационной компоненте\r\n    //делим общее количество юзеров на то, сколько их будет в 1 порции, получаем количество страниц\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n    //массив с нумерацией страниц\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    //количество порций = количество страниц / размер порции\r\n    let portionCount = Math.ceil(pagesCount / props.portionSize)\r\n    //локал стейт для кнопок prev/next для переключения порций\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    //находим левую/правую пограничную страницу в порции\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * props.portionSize;\r\n\r\n    return (\r\n      <div className={styles.paginator}>\r\n          {// если номер показываемой порции больше 1, то показать кнопку Prev с онкликом изменить номер показываемой порции на -1\r\n              portionNumber > 1\r\n                ? <button onClick={() => setPortionNumber(portionNumber - 1)}>Previous</button>\r\n                : null}\r\n          {pages\r\n            //находим нужную порцию по пограничным страницам порции\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map(p =>\r\n              <span className={props.currentPage === p ? styles.selectedPage : styles.page}\r\n                    onClick={() => {\r\n                        props.onPageChanger(p)\r\n                    }}>{p}</span>\r\n            )}\r\n          {//если общее количество порций больше, чем текущая порция, то показать кнопку Next\r\n              // с онкликом изменить номер показываемой порции на +1\r\n              portionCount > portionNumber\r\n                ? <button onClick={() => setPortionNumber(portionNumber + 1)}>Next</button>\r\n                : null}\r\n      </div>\r\n    )\r\n}","import styles from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/default-user-avatar.svg\";\r\nimport React from \"react\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type UserPropsType = {\r\n    user: UsersType\r\n    follow: any\r\n    unfollow: any\r\n    isFollowedInProgress: string[]\r\n}\r\n\r\nexport const User: React.FC<UserPropsType> = ({user, ...props}) => (\r\n    <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + user.id}>\r\n                            <img\r\n                                src={\r\n                                    /*если фото отсутствует, то стандартная картинка*/\r\n                                    user.photos.small != null ? user.photos.small : userPhoto}\r\n                                className={styles.userPhoto}\r\n                                alt={\"avatar\"}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed ?\r\n                            //если хоть кто-то из массива обрабатывающихся id совпадает с user id по которым мапимся, то true в disabled\r\n                            <button disabled={props.isFollowedInProgress.some((id: string) => id === user.id)}\r\n                                    onClick={() => {\r\n                                        //меняет в стейте дизаблед кнопки на тру\r\n                                        props.unfollow(user.id)\r\n                                    }}>Unfollow</button>\r\n                            : <button disabled={props.isFollowedInProgress.some((id: string) => id === user.id)}\r\n                                      onClick={() => {\r\n                                          props.follow(user.id)\r\n                                      }}>Follow</button>\r\n                        }</div>\r\n                        </span>\r\n        <span>\r\n                        <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                        </span>\r\n                        <span>\r\n                        <div>{\"u.location.city\"}</div>\r\n                        <div>{\"u.location.country\"}</div>\r\n                        </span>\r\n\r\n            {/*<button onClick={() => {*/}\r\n            {/*    this.props.setUsers()*/}\r\n            {/*}}>Show more</button>*/}\r\n\r\n                        </span>\r\n    </div>\r\n)","import React from \"react\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\n\r\nexport type UsersListPropsType = {\r\n    users: Array<UsersType>\r\n    follow: any\r\n    unfollow: any\r\n    isFollowedInProgress: string[]\r\n    onPageChanger: (page: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n}\r\n\r\nexport const UsersList: React.FC<UsersListPropsType> = (props) => (\r\n  <div>\r\n      <Paginator totalItemsCount={props.totalUsersCount}\r\n                 pageSize={props.pageSize}\r\n                 currentPage={props.currentPage}\r\n                 onPageChanger={props.onPageChanger}\r\n                 portionSize={10}/>\r\n      {\r\n          props.users.map(u => <User key={u.id}\r\n                                     user={u}\r\n                                     isFollowedInProgress={props.isFollowedInProgress}\r\n                                     follow={props.follow} unfollow={props.unfollow}/>\r\n          )\r\n      }\r\n  </div>\r\n)","//функция кот принимает State целиком, достает только то, что нужно компоненте и передаёт это в бизнес в mStP\r\n//это нужно, чтобы мы решим изменить архитектуру стейта, чтобы не исправлять в каждом mStP, мы исправим в 1 месте - здесь\r\nimport {RootStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\"\r\n\r\n//примитивный селектор\r\nexport const getUsersSelector = (state: RootStateType) => state.usersPage.usersData\r\n//селектор с вычислениями, reselect предотвращает перерисовку ( useMemo ), кэшируя её значения и пересчитывает только при измен. в getUsersSelector\r\nexport const getUsers = createSelector(getUsersSelector, (users) => users.filter(u => true))\r\nexport const getPageSize = (state: RootStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: RootStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: RootStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsLoading = (state: RootStateType) => {\r\n    return state.usersPage.isLoading\r\n}\r\nexport const getIsFollowingProgress = (state: RootStateType) => {\r\n    return state.usersPage.isFollowingInProgress\r\n}","import {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    UsersType,\r\n    toggleFollowingProgressAC, requestUsersTC, unfollowTC, followTC\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport {UsersList} from \"./UsersList\";\r\nimport { Preloader } from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getIsLoading,\r\n    getIsFollowingProgress\r\n} from \"../../redux/users-selectors\";\r\n\r\n//пропсы берутся из объекта, сформированного функцией connect ниже\r\ntype UserContainerProps = {\r\n    users: Array<UsersType>\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    isLoading: boolean\r\n    follow: any\r\n    unfollow: any\r\n    toggleFollowingProgress: (isFollowingInProgress: boolean, userId: string) => void\r\n    isFollowingInProgress: string[]\r\n    getUsers: any\r\n}\r\n\r\nclass UsersContainer extends React.Component<UserContainerProps, any> {\r\n    componentDidMount() {\r\n        //вызываем санку\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanger = (currentPage: number) => {\r\n        this.props.getUsers(currentPage, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        //после return --- если идет запрос на сервак, то отобразить крутилку\r\n        return <>\r\n            {this.props.isLoading ? <Preloader/> : null}\r\n            <UsersList totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       follow={this.props.follow}\r\n                       unfollow={this.props.unfollow}\r\n                       onPageChanger={this.onPageChanger}\r\n                       users={this.props.users}\r\n                       isFollowedInProgress={this.props.isFollowingInProgress}\r\n                    />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    //принимает стейт целиком, а возвращает только то, что нужно компоненте\r\n    //выбираем стейт в селекторах, чтобы если что не менять все mstp, а поменять в 1 селекторе\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isLoading: getIsLoading(state),\r\n        isFollowingInProgress: getIsFollowingProgress(state)\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: (action: any) => void) => {\r\n    //передает в пропсах презентационной компоненте коллбеки, которая она может вызывать\r\n    return {\r\n        follow: (userId: string) => {\r\n            debugger\r\n            //диспатчит результат работы AC\r\n            dispatch(followTC(userId))\r\n        },\r\n        unfollow: (userId: string) => {\r\n            dispatch(unfollowTC(userId))\r\n        },\r\n        toggleFollowingProgress: (isFollowingInProgress: boolean, userId: string) => {\r\n            dispatch(toggleFollowingProgressAC(isFollowingInProgress, userId))\r\n        },\r\n        getUsers: (currentPage: number, pageSize: number) => {\r\n            dispatch(requestUsersTC(currentPage, pageSize))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n  withAuthRedirect,\r\n  connect(mapStateToProps, mapDispatchToProps)\r\n)(UsersContainer)\r\n","import React from 'react';\r\nimport classes from \"./Header.module.css\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport {HeaderContainerPropsType} from \"./HeaderContainer\";\r\n\r\nfunction Header(props: HeaderContainerPropsType) {\r\n    return <header className={classes.header}>\r\n        <img src=\"https://i.ibb.co/HN350sc/70a3b023-88a2-4ebb-a063-784ca54ae184-200x200.png\" alt=\"logo\"/>\r\n\r\n        <div className={classes.loginBlock}>\r\n            {props.isAuth\r\n              ? <div>{props.login} - <button onClick={props.logout}>Log Out</button></div> :\r\n              //показываем имя пользователя либо ссылку на страницу логина\r\n              <NavLink to={\"/login\"}>Login</NavLink>\r\n            }\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import {ActionsType} from \"./redux-store\";\r\nimport {authAPI, securityAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {TOGGLE_IS_LOADING} from \"./users-reducer\";\r\n\r\n// types\r\nexport type AuthType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isLoading: boolean\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\nconst SET_USER_DATA = \"auth/SET_USER_DATA\"\r\nconst GET_CAPTCHA_URL_SUCCESS = \"auth/GET_CAPTCHA_URL_SUCCESS\"\r\ntype ResponseData = {\r\n    resultCode: number,\r\n    data: {\r\n        id: number | null\r\n        login: string | null\r\n        email: string | null\r\n    }\r\n}\r\n\r\nlet initialState: AuthType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isLoading: false,\r\n    isAuth: false,\r\n    captchaUrl: null // if null captcha is not required\r\n};\r\nexport const authReducer = (state: AuthType = initialState, action: ActionsType): AuthType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case TOGGLE_IS_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserDataAC = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n  ({type: SET_USER_DATA, payload: {userId, email, login, isAuth}} as const)\r\nexport const getCaptchaUrlSuccessAC = (captchaUrl: string) =>\r\n  ({type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}} as const)\r\n\r\n\r\nexport const getAuthUserDataTC = () =>\r\n  async (dispatch: Dispatch) => {\r\n      //возвращаем промис внаружу, диспатч TC вернет этот промис в app-reducer\r\n      let response: ResponseData = await authAPI.me()\r\n      if (response.resultCode === 0) {\r\n          let {id, email, login} = response.data;\r\n          //axios упаковывает в data и разраб сервера упаковал в data\r\n          dispatch(setAuthUserDataAC(id, email, login, true))\r\n      }\r\n  }\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean, captchaInput: string) =>\r\n  async (dispatch: Dispatch<any>) => {\r\n      let response = await authAPI.login(email, password, rememberMe, captchaInput);\r\n      if (response.resultCode === 0) {\r\n          //запускаем санку получения данных юзера с серва, если успешная логинизация\r\n          dispatch(getAuthUserDataTC())\r\n      } else {\r\n          // captcha\r\n          if (response.resultCode === 10) {\r\n              dispatch(getCaptchaUrlTC())\r\n          }\r\n          //если resultCode !== 0, то останавливаем сабмит формы\r\n          //проверяем не пустой ли массив с сообщ. об ошибке\r\n          let errorMessage = response.messages.length > 0 ? response.messages[0] : \"Unknown error\"\r\n          //1 арг. название именно <form/>, вторым объект с проблемным полем (_error для всех сразу field)\r\n          dispatch(stopSubmit(\"login\", {_error: errorMessage}))\r\n      }\r\n  }\r\nexport const getCaptchaUrlTC = () =>\r\n  async (dispatch: Dispatch<any>) => {\r\n      const response = await securityAPI.getCaptchaUrl();\r\n      const captchaUrl = response.data.url\r\n      dispatch(getCaptchaUrlSuccessAC(captchaUrl))\r\n  }\r\nexport const logoutTC = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.resultCode === 0) {\r\n        //удаляем всю информацю из стейта о юзере в исходное состояние (initState)\r\n        dispatch(setAuthUserDataAC(null, null, null, false))\r\n    }\r\n}","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from 'react-redux';\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {logoutTC} from \"../../redux/auth-reducer\";\r\n\r\n\r\nexport type HeaderContainerPropsType = {\r\n    isAuth: boolean\r\n    isLoading: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst HeaderContainer: React.FC<HeaderContainerPropsType> = (props) => {\r\n    return <Header {...props}/>\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    isLoading: state.auth.isLoading,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout: logoutTC})(HeaderContainer);","//типизация redux-form\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../../common/FormsWithValidationErrors/FormsWithValidationErrors\";\r\n//validator for Field from another file\r\nimport {required} from \"../../../utils/validators\";\r\nimport {LoginFormData} from \"../Login\";\r\nimport classes from \"./../../common/FormsWithValidationErrors/FormsWithValidationErrors.module.css\";\r\n//деструктуризация пропсов, достаем из них нужные айтемы, чтобы постоянно не писать props.error\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormData, { captchaUrl: string }> & { captchaUrl: string }> = ({handleSubmit, error, captchaUrl}) => {\r\n      //handleSubmit прокинул HOC, он делает e.preventDefault, передает значения из инпутов наверх упакуя в объект\r\n      return <form onSubmit={handleSubmit}>\r\n          <div><Field component={Input} validate={[required]} name=\"email\" placeholder=\"Email\" type='email'/></div>\r\n          <div><Field component={Input} validate={[required]} name=\"password\" placeholder=\"Password\" type='password'/>\r\n          </div>\r\n          <div><Field component={Input} name=\"rememberMe\" type=\"checkbox\"/> remember me</div>\r\n          {captchaUrl && <img src={captchaUrl} alt='captcha'/>}\r\n          {captchaUrl && <Field component={Input} placeholder='Enter symbols from image' name='captchaInput' validate={[required]} />}\r\n          {error && <div className={classes.formSummaryError}>{error}</div>}\r\n          <div>\r\n              <button>Login</button>\r\n          </div>\r\n      </form>\r\n  }\r\n//HOC, оборачиваем им форму\r\nexport const LoginReduxForm = reduxForm<LoginFormData, { captchaUrl: string }>({\r\n    //имя для этой формы\r\n    form: 'login'\r\n})(LoginForm)","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginTC} from \"../../redux/auth-reducer\";\r\nimport {LoginReduxForm} from \"./LoginForm/LoginForm\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\n\r\nexport type LoginFormData = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captchaInput: string\r\n}\r\n\r\nconst Login = (props: any) => {\r\n    //сюда придет инфа по инпутам, собранная handleSubmit {login: 'что ввел', rememberMe: true} и тд\r\n    const onSubmit = (formData: LoginFormData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captchaInput)\r\n    }\r\n\r\n    if(props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login: loginTC})(Login);\r\n","import {ActionsType} from \"./redux-store\";\r\nimport {getAuthUserDataTC} from \"./auth-reducer\";\r\n\r\n// types\r\nconst INITIALIZING_SUCCESS = \"app/INITIALIZING_SUCCESS\"\r\n\r\n\r\nconst initialState = {initialized: false};\r\n\r\nconst appReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case INITIALIZING_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setInitializingSuccessAC = () => ({type: INITIALIZING_SUCCESS} as const)\r\n\r\n// thunks\r\nexport const initializeAppTC = () => {\r\n    return (dispatch: any) => {\r\n        //dispatch Не только что-то диспатчит, но и умеет возвращать что-то, что напишем в ретурне санки(или async await сам по себе ретурнит его??)\r\n        let promise = dispatch(getAuthUserDataTC())\r\n        //all ждет пока зарезолвятся все промисы из массива\r\n        Promise.all([promise])\r\n          .then(() => {\r\n              //когда приходит инфа о том, что юзер авторизован(или нет), диспатчим в бизнес initialSuccess\r\n              dispatch(setInitializingSuccessAC())\r\n          })\r\n    }\r\n}\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport {\r\n    addPostAC,\r\n    deletePostAC,\r\n    profileReducer,\r\n    savePhotosSuccessAC,\r\n    setProfileAC,\r\n    setStatusAC\r\n} from \"./profile-reducer\";\r\nimport {addMessageAC, deleteMessageAC, dialogsReducer} from \"./dialogs-reducer\";\r\nimport userReducer, {\r\n    followSuccessAC,\r\n    setCurrentPageAC,\r\n    setTotalUsersCountAC,\r\n    setUsersAC,\r\n    toggleFollowingProgressAC,\r\n    toggleIsLoadingAC,\r\n    unfollowSuccessAC,\r\n} from \"./users-reducer\";\r\nimport {authReducer, getCaptchaUrlSuccessAC, setAuthUserDataAC} from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer, {setInitializingSuccessAC} from \"./app-reducer\";\r\n\r\nexport type RootStateType = ReturnType<typeof reducers>\r\nexport type ActionsType =\r\n//автоматическая типизация ActionCreator, добавить as const и убрать типизацию того, что выходит из функции(после кавычек)\r\n  ReturnType<typeof addPostAC> |\r\n  ReturnType<typeof addMessageAC> |\r\n  ReturnType<typeof followSuccessAC> |\r\n  ReturnType<typeof unfollowSuccessAC> |\r\n  ReturnType<typeof setUsersAC> |\r\n  ReturnType<typeof setCurrentPageAC> |\r\n  ReturnType<typeof setTotalUsersCountAC> |\r\n  ReturnType<typeof toggleIsLoadingAC> |\r\n  ReturnType<typeof setProfileAC> |\r\n  ReturnType<typeof setAuthUserDataAC> |\r\n  ReturnType<typeof toggleFollowingProgressAC> |\r\n  ReturnType<typeof setStatusAC> |\r\n  ReturnType<typeof setInitializingSuccessAC> |\r\n  ReturnType<typeof deletePostAC> |\r\n  ReturnType<typeof deleteMessageAC> |\r\n  ReturnType<typeof savePhotosSuccessAC> |\r\n  ReturnType<typeof getCaptchaUrlSuccessAC>\r\n\r\nlet reducers = combineReducers({\r\n    //этот объект воспринимать как state\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: userReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    //redux-form\r\n    form: formReducer\r\n});\r\n\r\n//store for ReduxDevTools\r\n//расширение добавит в глобальный window __REDUX_D.., если его нет то обычный compose\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers,composeEnhancers( applyMiddleware(thunkMiddleware)));\r\n\r\n//обычный стор\r\n//export let store: Store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n\r\n//нужно для того, чтобы видеть store в консоли\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react'\r\nimport {Preloader} from \"../components/common/Preloader/Preloader\";\r\n\r\n//HOC возвращает новую компоненту, а не JSX\r\nexport const withSuspense = (Component: any) => {\r\n    //для lazy, в fallback указываем компоненту, кот. будет показываться пока ждем загрузки\r\n    return (props: any) => <React.Suspense fallback={<Preloader/>}>\r\n        <Component {...props}/>\r\n    </React.Suspense>\r\n}\r\n\r\n","import React from \"react\"\r\nimport s from \"./Page404.module.css\"\r\n\r\nexport const Page404 = () => {\r\n    return (\r\n      <div className={s.block}>\r\n          <div className={s.c}>\r\n              <div className={s._404}>404</div>\r\n              <hr/>\r\n              <div className={s._1}>THE PAGE</div>\r\n              <div className={s._2}>WAS NOT FOUND</div>\r\n              <a className={s.btn} href='#/profile'>BACK TO PROFILE</a>\r\n          </div>\r\n      </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {HashRouter, Route, withRouter, Switch, Redirect} from 'react-router-dom';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from './components/Login/Login';\r\nimport {connect, Provider} from 'react-redux';\r\nimport {initializeAppTC} from \"./redux/app-reducer\";\r\nimport {RootStateType, store} from \"./redux/redux-store\";\r\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nimport { Page404 } from './components/common/Page404/Page404';\r\n\r\n//компонента не попадает в бандл(вебпак собирает все файлы в 1), она будет в своем бандле и только когда она не понадобится\r\n//это ускоряет стартовую загрузку, но медленнее, когда перейдем к этой компоненте\r\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"));\r\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\r\n\r\n\r\ntype AppPropsType = {\r\n    initialized: boolean\r\n    initializingApp: () => void\r\n}\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n    catchAllUnhandledErrors = (promiseRejectionEvent: any) => {\r\n        //server errors/offline\r\n        alert(\"Some error occurred\")\r\n    }\r\n    componentDidMount() {\r\n        this.props.initializingApp()\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n    // clear junk before comp dies\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        //we see preloader before compDidMount works\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        //В Profile /:userId param for withRouter props (60)\r\n        // ? after userId makes param optional, so if we haven't it in url, another profile will be uploaded(in component code)\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className=\"app-wrapper-content\">\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={withSuspense(ProfileContainer)}/>\r\n                        <Route path=\"/dialogs\"\r\n                                   render={withSuspense(DialogsContainer)}/>\r\n                        <Route path=\"/profile/:userId?\"\r\n                               render={withSuspense(ProfileContainer)}/>\r\n                        <Route path=\"/users\"\r\n                               render={() => <UsersContainer/>}/>\r\n                        <Route path=\"/news\" component={News}/>\r\n                        <Route path=\"/music\" component={Music}/>\r\n                        <Route path=\"/settings\" component={Settings}/>\r\n\r\n                        <Route path=\"/login\" component={Login}/>\r\n                        <Route path={'/404'} render={() => <Page404/>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n          )\r\n          ;\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n    initializingApp: () => dispatch(initializeAppTC())\r\n})\r\n\r\nlet AppContainer: any = compose(\r\n  withRouter, //for taking URI-params\r\n  connect(mapStateToProps, mapDispatchToProps))(App)\r\n\r\n//made this component for correct work App.test\r\nexport const MainApp = () => (\r\n  //HashRouter for github pages\r\n  <HashRouter>\r\n      <Provider store={store}>\r\n          <AppContainer/>\r\n      </Provider>\r\n  </HashRouter>\r\n)","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {MainApp} from './App';\r\n\r\nReactDOM.render(\r\n    <MainApp/>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsWithValidationErrors_formControl__8VE6q\",\"error\":\"FormsWithValidationErrors_error__3I0hX\",\"formSummaryError\":\"FormsWithValidationErrors_formSummaryError__68DeX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Page404_block__1a3GG\",\"c\":\"Page404_c__2ANwZ\",\"_404\":\"Page404__404__3yze_\",\"_1\":\"Page404__1__3qdCo\",\"_2\":\"Page404__2__2rNqX\",\"text\":\"Page404_text__GTBsp\",\"btn\":\"Page404_btn__2nqtV\",\"right\":\"Page404_right__3mVuj\"};","import styles from \"./Preloader.module.css\"\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\nimport React from \"react\";\r\n\r\nexport function Preloader() {\r\n    return <div className={styles.spinnerContainer}>\r\n        <img src={preloader} alt={\"Preloader spinner\"}/>\r\n    </div>;\r\n}","import React from \"react\"\r\nimport classes from \"./FormsWithValidationErrors.module.css\"\r\n\r\n//rest оператор, деструктуризацией достаем инпут, мета, а остальное оставить в пропсы\r\nexport const Textarea = ({input, meta, ...props}: any) => {\r\n    //если был в фокусе и не проходит валидатор.тс (в meta.error текст ошибки, либо null/undefined)\r\n    const hasError = meta.touched && meta.error\r\n    return <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\r\n        <textarea {...input} {...props}/>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n    //если был в фокусе и не проходит валидатор.тс (в meta.error текст ошибки, либо null/undefined)\r\n    const hasError = meta.touched && meta.error\r\n    return <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\r\n        <input {...input} {...props}/>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n}","//если пришло value, то undefined, else string\r\nexport const required = (value: string) => value ? undefined : \"Field is required\"\r\n\r\n/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nт.к. не мы вызываем внутреннюю функцию, передать в неё помимо value maxLength вторым параметром нельзя, поэтому\r\nоборачиваем в функцию обертку и передаем в неё параметр\r\n(ЗАМЫКАНИЕ - фун возвр другую фун и эта внутренняя фун может юзать параметры(переменные и т.д.) внешней функции) */\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n    return (value: string) => value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2TTw3\",\"page\":\"Paginator_page__IO0Pt\",\"selectedPage\":\"Paginator_selectedPage__1Iz0d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2wm1e\",\"loginBlock\":\"Header_loginBlock__1Oxrs\"};","import React from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {RootStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {MapStateToPropsForRedirectType} from '../components/Profile/ProfileContainer';\r\n\r\n//берет только то, что нужно redirect, чтобы сделать его уникальным\r\nlet mapStateToPropsForRedirect = (state: RootStateType): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n// Обертвываем приходящую компоненту в логику с Redirect\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            //если не залогинен, то редирект на логин\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            //возвращаем пришедший компонент с его пропсами\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    //юзаем коннект только с половиной стейта\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","import {v1} from \"uuid\";\r\nimport {ActionsType} from \"./redux-store\";\r\nimport {profileAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileFormDataType} from \"../components/Profile/ProfileInfo/ProfileInfo\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n// types\r\nconst ADD_POST = 'profile/ADD_POST'\r\nconst DELETE_POST = 'profile/DELETE_POST'\r\nconst SET_PROFILE = 'profile/SET_PROFILE'\r\nconst SET_STATUS = 'profile/SET_STATUS'\r\nconst SAVE_PHOTOS = 'profile/SAVE_PHOTOS'\r\nexport type PostTypes = {\r\n    id: string\r\n    message: string;\r\n    likesCount: number;\r\n};\r\nexport type ProfilePageType = {\r\n    postsData: Array<PostTypes>;\r\n    profile: any\r\n    status: string\r\n};\r\n\r\nlet initialState: ProfilePageType = {\r\n    postsData: [\r\n        {id: v1(), message: \"Hi, how are you?\", likesCount: 7},\r\n        {id: v1(), message: \"It's my first post\", likesCount: 53},\r\n        {id: v1(), message: \"КУ\", likesCount: 3},\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n};\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {id: v1(), message: action.newPostText, likesCount: 0};\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost]\r\n            }\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                postsData: state.postsData.filter(post => post.id !== action.postId)\r\n            }\r\n        case SET_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SAVE_PHOTOS:\r\n            debugger\r\n            return {\r\n                ...state,\r\n                //меняем только объект с фотками\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// actions\r\nexport const addPostAC = (newPostText: string) => ({type: ADD_POST, newPostText} as const)\r\nexport const deletePostAC = (postId: string) => ({type: DELETE_POST, postId} as const)\r\nexport const setProfileAC = (profile: ProfilePageType) => ({type: SET_PROFILE, profile} as const)\r\nexport const setStatusAC = (status: string) => ({type: SET_STATUS, status} as const)\r\nexport const savePhotosSuccessAC = (photos: { large: string, small: string }) => ({type: SAVE_PHOTOS, photos} as const)\r\n\r\n\r\n// thunks\r\nexport const getUserProfile = (userId: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    let response = await profileAPI.getProfile(userId)\r\n    dispatch(setProfileAC(response))\r\n}\r\nexport const getStatus = (userId: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    let response = await profileAPI.getUserStatus(userId)\r\n    dispatch(setStatusAC(response))\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        let response = await profileAPI.updateStatus(status)\r\n        if (response.resultCode === 0) {\r\n            dispatch(setStatusAC(status))\r\n        }\r\n    } catch(error) {\r\n        alert(error)\r\n        //сделать обработку ошибок из тудулиста\r\n        //сделал switch, redirect to 404, 404 page, validation in contacts now shows on each form\r\n    }\r\n}\r\nexport const updatePhoto = (photo: File | null | undefined) => async (dispatch: Dispatch<ActionsType>) => {\r\n    let response = await profileAPI.uploadPhoto(photo)\r\n    if (response.resultCode === 0) {\r\n        dispatch(savePhotosSuccessAC(response.data.photos))\r\n    }\r\n}\r\nexport const updateProfile = (changedProfile: ProfileFormDataType) => async (dispatch: Dispatch<any>, getState: any) => {\r\n    const userId = getState().auth.userId\r\n    const response = await profileAPI.updateProfile(changedProfile)\r\n    if (response.resultCode === 0) {\r\n        //т.к серв не возвращает обновленный профиль, то диспатчим санку для его получения\r\n        dispatch(getUserProfile(userId))\r\n    } else {\r\n        //в чейне выбираем из строки ошибки с сервера название нужного поля, в котором она происходит\r\n        dispatch(stopSubmit('edit-profile', {'contacts': {[response.messages[0].substring(30, response.messages[0].length - 1).toLowerCase()]: response.messages[0]}}))\r\n        return Promise.reject(response.messages[0]);\r\n    }\r\n}\r\n\r\n"],"sourceRoot":""}