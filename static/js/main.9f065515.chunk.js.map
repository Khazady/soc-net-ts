{"version":3,"sources":["utils/validators.ts","components/common/Paginator/Paginator.module.css","hoc/withAuthRedirect.tsx","api/profile-api.ts","redux/profile-reducer.ts","assets/images/default-user-avatar.svg","redux/dialogs-reducer.ts","components/Users/Users.module.css","components/common/Preloader/Preloader.module.css","assets/images/preloader.svg","api/api.ts","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","api/user-api.ts","redux/users-reducer.ts","components/Users/UsersList.tsx","components/Users/UsersPage.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/LoginPage.tsx","redux/store.ts","hoc/withSuspense.tsx","components/common/Page404/Page404.tsx","redux/auth-selectors.ts","components/Header/AppHeader.tsx","App.tsx","index.tsx","components/common/FormsWithValidationErrors/FormsWithValidationErrors.module.css","components/common/Page404/Page404.module.css","components/common/Preloader/Preloader.tsx","components/common/FormsWithValidationErrors/FormsWithValidationErrors.tsx"],"names":["required","value","undefined","maxLengthCreator","maxLength","length","module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","response","changedProfile","initialState","postsData","id","v1","message","likesCount","profile","profileReducer","action","type","newPost","newPostText","filter","post","postId","photos","addPostAC","setStatusAC","getUserProfileTC","dispatch","a","getStatusTC","updateStatusTC","resultCode","alert","updatePhotoTC","photo","updateProfileTC","getState","Error","stopSubmit","messages","substring","toLowerCase","Promise","reject","dialogsData","name","avatar","messagesData","dialogsReducer","newMessage","newMessageText","mess","messageId","addMessageAC","ResultCodes","ResultCodeForCaptcha","axios","create","withCredentials","baseURL","News","Music","Settings","Paginator","pagesCount","Math","ceil","totalItemsCount","pageSize","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","styles","paginator","onClick","p","map","key","random","currentPageNumber","selectedPage","page","onPageChanger","User","user","src","small","userPhoto","alt","followed","disabled","isFollowedInProgress","some","unfollow","follow","getUsers","createSelector","usersPage","usersData","users","u","getPageSize","selectTotalUsersCount","totalUsersCount","selectCurrentPage","currentPage","selectIsLoading","isLoading","selectIsFollowingProgress","isFollowingInProgress","selectUsersFilter","formValidation","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","term","friend","validate","onSubmit","setSubmitting","onFilterChanger","isSubmitting","as","authAPI","email","password","rememberMe","captcha","delete","securityAPI","login","captchaUrl","setAuthUserDataAC","payload","getCaptchaUrlSuccessAC","getAuthUserDataTC","meData","Success","getCaptchaUrlTC","url","isInitialized","toggleIsLoadingAC","usersAPI","searchInput","followSuccessAC","unfollowSuccessAC","setFilterAC","toggleFollowingProgressAC","requestUsersTC","document","title","pageNumber","newUsersData","items","totalCount","UsersList","useEffect","parsed","queryString","history","location","search","substr","actualPage","actualFilter","Number","useDispatch","followTC","unfollowTC","useHistory","query","String","pathname","compose","Preloader","LoginReduxForm","reduxForm","form","handleSubmit","error","Field","component","Input","placeholder","classes","formSummaryError","LoginPage","captchaInput","CaptchaIsRequired","errorMessage","_error","rootReducer","combineReducers","profilePage","dialogsPage","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","Suspense","fallback","Page404","s","block","c","_404","_1","_2","btn","href","selectIsAuth","selectCurrentUserLogin","Header","Layout","AppHeader","span","width","theme","mode","Item","size","SubMenu","Menu","Content","Footer","Sider","DialogsPage","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandledErrors","e","this","initializingApp","addEventListener","removeEventListener","style","padding","margin","defaultSelectedKeys","height","icon","UserOutlined","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","from","textAlign","Component","AppContainer","withRouter","promise","all","MainApp","ReactDOM","getElementById","spinnerContainer","preloader","Textarea","input","meta","hasError","touched","formControl"],"mappings":"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","file":"static/js/main.9f065515.chunk.js","sourcesContent":["//common type\r\ntype FieldValidatorType = (value: string) => string | undefined\r\n\r\n//если пришло value, то undefined, else string\r\nexport const required: FieldValidatorType = (value) => value ? undefined : \"Field is required\"\r\n\r\n/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nт.к. не мы вызываем внутреннюю функцию, передать в неё помимо value maxLength вторым параметром нельзя, поэтому\r\nоборачиваем в функцию обертку и передаем в неё параметр\r\n(ЗАМЫКАНИЕ - фун возвр другую фун и эта внутренняя фун может юзать параметры(переменные и т.д.) внешней функции) */\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => {\r\n    return (value) => value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2TTw3\",\"page\":\"Paginator_page__IO0Pt\",\"selectedPage\":\"Paginator_selectedPage__1Iz0d\"};","import React from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {RootStateType} from \"../redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = { isAuth: boolean }\r\ntype MapDispatchPropsType = {}\r\n//берет только то, что нужно redirect, чтобы сделать его уникальным\r\nlet mapStateToPropsForRedirect = (state: RootStateType) => ({isAuth: state.auth.isAuth})\r\n\r\n//WCP wrapped component props\r\n// Обертвываем приходящую компоненту в логику с Redirect\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n        //забираем isAuth из props, чтобы не передавать его в WrappedComp\r\n        let {isAuth, ...restProps} = props\r\n        //если не залогинен, то редирект на логин\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        //возвращаем пришедший компонент с его пропсами\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n    //юзаем коннект только с половиной стейта\r\n    return connect<MapStatePropsType, MapDispatchPropsType, WCP, RootStateType>(\r\n      mapStateToPropsForRedirect, {})\r\n    (RedirectComponent);\r\n}","import {PhotosType, ProfileType} from '../types/commonTypes'\r\nimport {instance, ApiResponseType} from './api'\r\n\r\ntype UploadPhotosDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n          .then(res => res.data)\r\n    },\r\n    getUserStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n          .then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ApiResponseType>(`profile/status`, {status})\r\n          .then(res => res.data)\r\n    },\r\n    uploadPhoto(photoFile: File) {\r\n        //формируем объект с файлом\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<ApiResponseType<UploadPhotosDataType>>(`profile/photo`, formData, {\r\n            //меня тип отправляемых данных с json на формдату\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        })\r\n          .then(response => response.data)\r\n    },\r\n    updateProfile(changedProfile: ProfileType) {\r\n        return instance.put<ApiResponseType>(`profile`, changedProfile)\r\n          .then(res => res.data)\r\n    },\r\n}","import {v1} from \"uuid\"\r\nimport {FormAction, stopSubmit} from \"redux-form\"\r\nimport {PhotosType, PostType, ProfileType, BaseThunkType} from \"../types/commonTypes\"\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\nconst initialState = {\r\n    postsData: [\r\n        {id: v1(), message: \"Hi, how are you?\", likesCount: 7},\r\n        {id: v1(), message: \"It's my first post\", likesCount: 53},\r\n        {id: v1(), message: \"КУ\", likesCount: 3},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'PROFILE/ADD_POST':\r\n            let newPost = {id: v1(), message: action.newPostText, likesCount: 0};\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost]\r\n            }\r\n        case 'PROFILE/DELETE_POST':\r\n            return {\r\n                ...state,\r\n                postsData: state.postsData.filter(post => post.id !== action.postId)\r\n            }\r\n        case 'PROFILE/SET_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case 'PROFILE/SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {\r\n                ...state,\r\n                //меняем только объект с фотками\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// actions\r\nexport const addPostAC = (newPostText: string) => ({type: 'PROFILE/ADD_POST', newPostText} as const)\r\nexport const deletePostAC = (postId: string) => ({type: 'PROFILE/DELETE_POST', postId} as const)\r\nexport const setProfileAC = (profile: ProfileType) => ({type: 'PROFILE/SET_PROFILE', profile} as const)\r\nexport const setStatusAC = (status: string) => ({type: 'PROFILE/SET_STATUS', status} as const)\r\nexport const savePhotosSuccessAC = (photos: PhotosType) => ({type: 'PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\r\n\r\n\r\n// thunks\r\nexport const getUserProfileTC = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId)\r\n    dispatch(setProfileAC(data))\r\n}\r\nexport const getStatusTC = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getUserStatus(userId)\r\n    dispatch(setStatusAC(data))\r\n}\r\nexport const updateStatusTC = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        const data = await profileAPI.updateStatus(status)\r\n        if (data.resultCode === 0) {\r\n            dispatch(setStatusAC(status))\r\n        }\r\n    } catch (error) {\r\n        alert(error)\r\n    }\r\n}\r\nexport const updatePhotoTC = (photo: File): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.uploadPhoto(photo)\r\n    if (data.resultCode === 0) {\r\n        dispatch(savePhotosSuccessAC(data.data.photos))\r\n    }\r\n}\r\nexport const updateProfileTC = (changedProfile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.updateProfile(changedProfile)\r\n    if (data.resultCode === 0) {\r\n        //because in initState userId = null\r\n        if (userId)\r\n          //т.к серв не возвращает обновленный профиль, то диспатчим санку для его получения\r\n            await dispatch(getUserProfileTC(userId))\r\n        else\r\n            throw new Error('userId can\\'t be a null')\r\n    } else {\r\n        //в чейне выбираем из строки ошибки с сервера название нужного поля, в котором она происходит\r\n        dispatch(stopSubmit('edit-profile', {'contacts': {[data.messages[0].substring(30, data.messages[0].length - 1).toLowerCase()]: data.messages[0]}}))\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n}\r\n// types\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType =\r\n  | ReturnType<typeof addPostAC>\r\n  | ReturnType<typeof deletePostAC>\r\n  | ReturnType<typeof setProfileAC>\r\n  | ReturnType<typeof setStatusAC>\r\n  | ReturnType<typeof savePhotosSuccessAC>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/default-user-avatar.7d927e67.svg\";","import {v1} from 'uuid'\r\nimport {DialogItemType, MessageType} from \"../types/commonTypes\";\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: \"Chris\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/9/99/Chris_Pratt_2018.jpg\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Vicky\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/c/cf/Victoria_Justice_2013.jpg\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Mike\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Mike_Tyson_2019_by_Glenn_Francis.jpg/1200px-Mike_Tyson_2019_by_Glenn_Francis.jpg\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Alex\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/9/99/Chris_Pratt_2018.jpg\"\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Ivan\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/9/99/Chris_Pratt_2018.jpg\"\r\n        },\r\n    ] as Array<DialogItemType>,\r\n    messagesData: [\r\n        {id: v1(), message: \"Hello\"},\r\n        {id: v1(), message: \"What's up\"},\r\n        {id: v1(), message: \"Privet\"},\r\n        {id: v1(), message: \"Yo\"},\r\n        {id: v1(), message: \"Yo\"},\r\n    ] as Array<MessageType>,\r\n};\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_MESSAGE':\r\n            let newMessage = {id: v1(), message: action.newMessageText}\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, newMessage]\r\n                //эта запись перезатирает shallow-копию messagesData\r\n                //массив messagesData содержит объекты, мы их глубоко не копируем, т.к. не изменяем\r\n                //dialogsData глубоко не копируем, не собираемся изменять\r\n            };\r\n        case 'DELETE_MESSAGE':\r\n            return {\r\n                ...state,\r\n                messagesData: state.messagesData.filter(mess => mess.id !== action.messageId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const addMessageAC = (newMessageText: string) => ({type: 'ADD_MESSAGE', newMessageText} as const)\r\nexport const deleteMessageAC = (messageId: string) => ({type: 'DELETE_MESSAGE', messageId} as const)\r\n\r\n// types\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType =\r\n  | ReturnType<typeof addMessageAC>\r\n  | ReturnType<typeof deleteMessageAC>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__2-U6B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinnerContainer\":\"Preloader_spinnerContainer__2hnql\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.dacce764.svg\";","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": 'a13d3464-2e9e-4272-8cbf-d0d1a9048e02'\r\n    }\r\n})\r\n//default values, so we may not specify when it's not necessary.\r\nexport type ApiResponseType<D = {}, RS = ResultCodes> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RS\r\n}\r\nexport type GetItemsType<T> = {\r\n    items: T\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\n\r\n//only several requests may need captcha\r\nexport enum ResultCodes { Success = 0, Error = 1,}\r\nexport enum ResultCodeForCaptcha { CaptchaIsRequired = 10}\r\n\r\n","import React from \"react\";\r\nimport classes from \"./News.module.css\";\r\n\r\nconst News: React.FC = () => (\r\n  <div>\r\n      News\r\n  </div>\r\n);\r\n\r\nexport default News;","import React from \"react\";\r\nimport classes from \"./Music.module.css\";\r\n\r\nfunction Music(props: any) {\r\n  return (\r\n    <div>\r\n      Music\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport classes from \"./Settings.module.css\";\r\n\r\nfunction Settings(props: any) {\r\n  return (\r\n    <div>\r\n      Settings\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings;","import styles from './Paginator.module.css';\r\nimport React, {useState, FC} from 'react';\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPageNumber: number\r\n    onPageChanger: (page: number) => void\r\n    portionSize: number\r\n}\r\n\r\nexport const Paginator: FC<PropsType> = (props) => {\r\n    //делим общее количество юзеров на то, сколько их будет в 1 порции, получаем количество страниц\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n    //массив с нумерацией страниц\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    //количество порций = количество страниц / размер порции\r\n    let portionCount = Math.ceil(pagesCount / props.portionSize)\r\n    //локал стейт для кнопок prev/next для переключения порций\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    //находим левую/правую пограничную страницу в порции\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * props.portionSize;\r\n\r\n    return (\r\n      <div className={styles.paginator}>\r\n          {// если номер показываемой порции больше 1, то показать кнопку Prev с онкликом изменить номер показываемой порции на -1\r\n              portionNumber > 1\r\n                ? <button onClick={() => setPortionNumber(portionNumber - 1)}>Previous</button>\r\n                : null}\r\n          {pages\r\n            //находим нужную порцию по пограничным страницам порции\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map(p =>\r\n              <span key={Math.random()} className={props.currentPageNumber === p ? styles.selectedPage : styles.page}\r\n                    onClick={() => {\r\n                        props.onPageChanger(p)\r\n                    }}>{p}</span>\r\n            )}\r\n          {//если общее количество порций больше, чем текущая порция, то показать кнопку Next\r\n              // с онкликом изменить номер показываемой порции на +1\r\n              portionCount > portionNumber\r\n                ? <button onClick={() => setPortionNumber(portionNumber + 1)}>Next</button>\r\n                : null}\r\n      </div>\r\n    )\r\n}","import styles from './Users.module.css'\r\nimport userPhoto from '../../assets/images/default-user-avatar.svg'\r\nimport React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {UserType} from '../../types/commonTypes'\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    isFollowedInProgress: Array<number>\r\n}\r\n\r\nexport const User: React.FC<PropsType> = ({user, ...props}) => (\r\n    <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <img\r\n                                src={\r\n                                    /*если фото отсутствует, то стандартная картинка*/\r\n                                    user.photos.small != null ? user.photos.small : userPhoto}\r\n                                className={styles.userPhoto}\r\n                                alt={'avatar'}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed ?\r\n                            //если хоть кто-то из массива обрабатывающихся id совпадает с user id по которым мапимся, то true в disabled\r\n                            <button disabled={props.isFollowedInProgress.some((id) => id === user.id)}\r\n                                    onClick={() => {\r\n                                        //меняет в стейте дизаблед кнопки на тру\r\n                                        props.unfollow(user.id)\r\n                                    }}>Unfollow</button>\r\n                            : <button disabled={props.isFollowedInProgress.some((id) => id === user.id)}\r\n                                      onClick={() => {\r\n                                          props.follow(user.id)\r\n                                      }}>Follow</button>\r\n                        }</div>\r\n                        </span>\r\n        <span>\r\n                        <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                        </span>\r\n            {/*<button onClick={() => {*/}\r\n            {/*    this.props.setUsers()*/}\r\n            {/*}}>Show more</button>*/}\r\n\r\n                        </span>\r\n    </div>\r\n)","//функция кот принимает State целиком, достает только то, что нужно компоненте и передаёт это в бизнес в mStP\r\n//это нужно, чтобы мы решим изменить архитектуру стейта, чтобы не исправлять в каждом mStP, мы исправим в 1 месте - здесь\r\nimport {RootStateType} from './store'\r\nimport {createSelector} from 'reselect'\r\n\r\n//примитивный селектор\r\nexport const getUsersSelector = (state: RootStateType) => state.usersPage.usersData\r\n//селектор с вычислениями, reselect предотвращает перерисовку ( useMemo ), кэшируя её значения и пересчитывает только при измен. в getUsersSelector\r\nexport const getUsers = createSelector(getUsersSelector, (users) => users.filter(u => true))\r\nexport const getPageSize = (state: RootStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const selectTotalUsersCount = (state: RootStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const selectCurrentPage = (state: RootStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const selectIsLoading = (state: RootStateType) => {\r\n    return state.usersPage.isLoading\r\n}\r\nexport const selectIsFollowingProgress = (state: RootStateType) => {\r\n    return state.usersPage.isFollowingInProgress\r\n}\r\nexport const selectUsersFilter = (state: RootStateType) => {\r\n    return state.usersPage.filter\r\n}","import React from 'react'\r\nimport {Field, Form, Formik} from 'formik'\r\nimport {FilterType} from '../../redux/users-reducer'\r\nimport {useSelector} from 'react-redux'\r\nimport {selectUsersFilter} from '../../redux/users-selectors'\r\n\r\ntype PropsType = {\r\n    onFilterChanger: (filter: FilterType) => void\r\n}\r\n\r\nconst formValidation = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector(selectUsersFilter)\r\n\r\n    const submit = (values: FilterType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        props.onFilterChanger(values)\r\n        setSubmitting(false)\r\n    }\r\n    return <Formik\r\n        enableReinitialize\r\n        initialValues={{term: filter.term, friend: filter.friend}}\r\n        validate={formValidation}\r\n        onSubmit={submit}\r\n    >\r\n        {({isSubmitting}) => (\r\n            <Form>\r\n                <Field type=\"text\" name=\"term\"/>\r\n                <Field name=\"friend\" as=\"select\">\r\n                    <option value=\"null\">All</option>\r\n                    <option value=\"true\">Friends</option>\r\n                    <option value=\"false\">Unfollowed</option>\r\n                </Field>\r\n                <button type=\"submit\" disabled={isSubmitting}>\r\n                    Search\r\n                </button>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n})","import {instance, ApiResponseType, ResultCodeForCaptcha, ResultCodes} from \"./api\";\r\n\r\ntype MeResponseDataType = {id: number, email: string, login: string}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ApiResponseType<MeResponseDataType>>(`auth/me`).then((res) => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<ApiResponseType<{userId: number}, ResultCodes | ResultCodeForCaptcha>>('auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        }).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login').then(res => res.data)\r\n    }\r\n}","import {instance} from './api'\r\n\r\ntype GetCaptchaUrl = {url: string}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrl>(`security/get-captcha-url`).then(res => res.data)\r\n    }\r\n}","import {ResultCodeForCaptcha, ResultCodes} from \"../api/api\"\r\nimport {Dispatch} from \"redux\"\r\nimport {FormAction, stopSubmit} from \"redux-form\"\r\nimport {toggleIsLoadingAC} from \"./app-reducer\"\r\nimport {authAPI} from \"../api/auth-api\"\r\nimport {securityAPI} from \"../api/security-api\"\r\nimport {BaseThunkType} from \"../types/commonTypes\"\r\n\r\nconst initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isLoading: false,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null, // if null captcha is not required\r\n};\r\nexport const authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_USER_DATA':\r\n        case 'GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case 'APP/TOGGLE_IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserDataAC = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n  ({type: 'SET_USER_DATA', payload: {userId, email, login, isAuth}} as const)\r\nexport const getCaptchaUrlSuccessAC = (captchaUrl: string) =>\r\n  ({type: 'GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const)\r\n\r\n\r\nexport const getAuthUserDataTC = (): ThunkType =>\r\n  async (dispatch: Dispatch) => {\r\n      //возвращаем промис внаружу, диспатч TC вернет этот промис в app-reducer\r\n      const meData = await authAPI.me()\r\n      if (meData.resultCode === ResultCodes.Success) {\r\n          let {id, email, login} = meData.data;\r\n          //axios упаковывает в data и разраб сервера упаковал в data\r\n          dispatch(setAuthUserDataAC(id, email, login, true))\r\n      }\r\n  }\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean, captchaInput: string): ThunkType =>\r\n  async (dispatch) => {\r\n      const data = await authAPI.login(email, password, rememberMe, captchaInput);\r\n      if (data.resultCode === ResultCodes.Success) {\r\n          //запускаем санку получения данных юзера с серва, если успешная логинизация\r\n          dispatch(getAuthUserDataTC())\r\n      } else {\r\n          // captcha\r\n          if (data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n              dispatch(getCaptchaUrlTC())\r\n          }\r\n          //если resultCode !== 0, то останавливаем сабмит формы\r\n          //проверяем не пустой ли массив с сообщ. об ошибке\r\n          let errorMessage = data.messages.length > 0 ? data.messages[0] : 'Unknown error'\r\n          //1 арг. название именно <form/>, вторым объект с проблемным полем (_error для всех сразу field)\r\n          dispatch(stopSubmit(\"login\", {_error: errorMessage}))\r\n      }\r\n  }\r\nexport const getCaptchaUrlTC = (): ThunkType =>\r\n  async (dispatch) => {\r\n      const data = await securityAPI.getCaptchaUrl()\r\n      const captchaUrl = data.url\r\n      dispatch(getCaptchaUrlSuccessAC(captchaUrl))\r\n  }\r\nexport const logoutTC = (): ThunkType => async (dispatch) => {\r\n    const data = await authAPI.logout()\r\n    if (data.resultCode === 0) {\r\n        //удаляем всю информацю из стейта о юзере в исходное состояние (initState)\r\n        dispatch(setAuthUserDataAC(null, null, null, false))\r\n    }\r\n}\r\n\r\n// types\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType =\r\n  | ReturnType<typeof setAuthUserDataAC>\r\n  | ReturnType<typeof getCaptchaUrlSuccessAC>\r\n  | toggleIsLoadingAC\r\ntype ThunkType = BaseThunkType<ActionsType\r\n  //extra actions\r\n  | FormAction>","import {getAuthUserDataTC} from \"./auth-reducer\";\r\nimport {BaseThunkType} from \"../types/commonTypes\";\r\n\r\n\r\nconst initialState = {isInitialized: false};\r\n\r\nexport const appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/INITIALIZING_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isInitialized: true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const toggleIsLoadingAC = (isLoading: boolean) => ({type: 'APP/TOGGLE_IS_LOADING', isLoading} as const)\r\nexport const setInitializingSuccessAC = () => ({type: 'APP/INITIALIZING_SUCCESS'} as const)\r\n\r\n// thunks\r\nexport const initializeAppTC = (): ThunkType => {\r\n    return (dispatch) => {\r\n        //dispatch Не только что-то диспатчит, но и умеет возвращать что-то, что напишем в ретурне санки(или async await сам по себе ретурнит его??)\r\n        let promise = dispatch(getAuthUserDataTC())\r\n        //all ждет пока зарезолвятся все промисы из массива\r\n        Promise.all([promise])\r\n          .then(() => {\r\n              //когда приходит инфа о том, что юзер авторизован(или нет), диспатчим в бизнес initialSuccess\r\n              dispatch(setInitializingSuccessAC())\r\n          })\r\n    }\r\n}\r\n\r\n// types\r\nexport type InitialStateType = typeof initialState\r\nexport type toggleIsLoadingAC = ReturnType<typeof toggleIsLoadingAC>\r\ntype ActionsType = ReturnType<typeof setInitializingSuccessAC>\r\ntype ThunkType = BaseThunkType<ActionsType, void>\r\n","import {GetItemsType, instance, ApiResponseType} from './api'\r\nimport {UserType} from '../types/commonTypes'\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, searchInput = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType<Array<UserType>>>(`users?page=${currentPage}&count=${pageSize}&term=${searchInput}` + (friend === null ? '' : `&friend=${friend}`))\r\n          //тут промис зен, чтобы в компоненту приходил ответ только с data\r\n          .then(res => res.data)\r\n    },\r\n    //в get и delete настройки 2 параметр, в post 3-ий\r\n    followUser(userId: number) {\r\n        return instance.post<ApiResponseType>(`follow/${userId}`, {})\r\n          .then(res => res.data)\r\n    },\r\n    unfollowUser(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n          .then(res => res.data) as Promise<ApiResponseType>\r\n    }\r\n}","import {BaseThunkType, UserType} from '../types/commonTypes'\r\nimport {toggleIsLoadingAC} from './app-reducer'\r\nimport {usersAPI} from '../api/user-api'\r\n\r\nconst initialState = {\r\n    usersData: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    isFollowingInProgress: [] as Array<number>, // array of users Ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\nexport const userReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'USER/FOLLOW':\r\n            //этот мап делает копию только того юзера, который нужно изменить, остальное ссылки (Shallow)\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        //делаем копию только того юзера, которого меняем\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case 'USER/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case 'USER/SET_USERS':\r\n            //Дополняет инитстейт новыми юзерами, приходящими с сервака по нажатию кнопки show more\r\n            return {\r\n                ...state,\r\n                usersData: action.newUsersData\r\n            }\r\n        case 'USER/SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.pageNumber}\r\n        case 'USER/SET_FILTER':\r\n            return {...state, filter: action.payload}\r\n        case 'USER/SET_TOTAL_USERS_COUNT':\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        case 'APP/TOGGLE_IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        case 'USER/TOGGLE_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                isFollowingInProgress: action.isFollowingInProgress\r\n                    //если в action isFollowing true, то в конец массива айдишек(которые были нажаты) дописываем айди из action\r\n                    ? [...state.isFollowingInProgress, action.userId]\r\n                    //если false, то деструкт. не нужна, фильтр возвр. новый массив\r\n                    //удаляет из массивы обрабатывающихся id, ту, что закончила обработку\r\n                    : [state.isFollowingInProgress.filter((id) => id !== action.userId)]\r\n            } as InitialStateType\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const followSuccessAC = (userId: number) => ({type: 'USER/FOLLOW', userId} as const)\r\nexport const unfollowSuccessAC = (userId: number) => ({type: 'USER/UNFOLLOW', userId: userId} as const)\r\nexport const setUsersAC = (newUsersData: Array<UserType>) => ({type: 'USER/SET_USERS', newUsersData} as const)\r\nexport const setCurrentPageAC = (pageNumber: number) => ({type: 'USER/SET_CURRENT_PAGE', pageNumber} as const)\r\n//filter of searching users\r\nexport const setFilterAC = (filter: FilterType) => ({type: 'USER/SET_FILTER', payload: filter} as const)\r\nexport const setTotalUsersCountAC = (totalUsersCount: number) => ({\r\n    type: 'USER/SET_TOTAL_USERS_COUNT', totalUsersCount\r\n} as const)\r\nexport const toggleFollowingProgressAC = (isFollowingInProgress: boolean, userId: number) => ({\r\n    type: 'USER/TOGGLE_FOLLOWING_PROGRESS', isFollowingInProgress,\r\n    userId\r\n} as const)\r\n\r\n// thunks\r\n//AC возвращает объект, кот. мы можем задиспатчить, ThunkCreator возвр. функцию кот. мы можем задиспатчить\r\nexport const requestUsersTC = (currentPage: number, pageSize: number, filter: FilterType): BaseThunkType<ActionsType> =>\r\n    async (dispatch) => {\r\n        document.title = 'Users'\r\n        //включаем крутилку до запроса на серв\r\n        dispatch(toggleIsLoadingAC(true))\r\n        const data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n        //после ответа сервера выполнится этот код\r\n        dispatch(setFilterAC(filter))\r\n        dispatch(setCurrentPageAC(currentPage))\r\n        dispatch(setUsersAC(data.items))\r\n        dispatch(setTotalUsersCountAC(data.totalCount))\r\n        //выключаем после получения ответа\r\n        dispatch(toggleIsLoadingAC(false))\r\n    }\r\n\r\nexport const followTC = (userId: number): BaseThunkType<ActionsType> =>\r\n    async (dispatch) => {\r\n        //меняет в стейте дизаблед кнопки на тру\r\n        dispatch(toggleFollowingProgressAC(true, userId))\r\n        const data = await usersAPI.followUser(userId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(followSuccessAC(userId))\r\n        }\r\n        //разблочивает кнопку после запроса\r\n        dispatch(toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\nexport const unfollowTC = (userId: number): BaseThunkType<ActionsType> =>\r\n    async (dispatch) => {\r\n        //меняет в стейте дизаблед кнопки на тру\r\n        dispatch(toggleFollowingProgressAC(true, userId))\r\n        //дожидаемся когда промис придет в состояние resolved\r\n        const data = await usersAPI.unfollowUser(userId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(unfollowSuccessAC(userId))\r\n        }\r\n        //разблочивает кнопку после запроса\r\n        dispatch(toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType =\r\n    | ReturnType<typeof followSuccessAC>\r\n    | ReturnType<typeof unfollowSuccessAC>\r\n    | ReturnType<typeof setUsersAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setTotalUsersCountAC>\r\n    | ReturnType<typeof toggleFollowingProgressAC>\r\n    | toggleIsLoadingAC\r\n    | ReturnType<typeof setFilterAC>\r\n","import React, {useEffect} from 'react'\r\nimport {Paginator} from '../common/Paginator/Paginator'\r\nimport {User} from './User'\r\nimport {UsersSearchForm} from './UsersSearchForm'\r\nimport {FilterType, followTC, requestUsersTC, unfollowTC} from '../../redux/users-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    selectCurrentPage,\r\n    selectIsFollowingProgress,\r\n    getPageSize,\r\n    selectTotalUsersCount,\r\n    getUsers,\r\n    selectUsersFilter\r\n} from '../../redux/users-selectors'\r\nimport {useHistory} from 'react-router-dom'\r\nimport * as queryString from 'querystring'\r\n\r\nexport const UsersList: React.FC = () => {\r\n\r\n    //instead compDidMount\r\n    useEffect(() => {\r\n        // implementing links with query params at start of app\r\n\r\n        //parsing query string into object (substr from 1st element cuz querystring library parsing ? to first key)\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        //transform query string into data for BLL\r\n        if (parsed.page) actualPage = Number(parsed.page)\r\n        //as string  because we can input 2 same params and it will turn into array of strings\r\n        if (parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n            case 'false':\r\n                actualFilter = {...actualFilter, friend: false}\r\n        }\r\n        //sending data from query string to api and bll\r\n        dispatch(requestUsersTC(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    //instead props from mstp\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(selectTotalUsersCount)\r\n    const currentPage = useSelector(selectCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(selectUsersFilter)\r\n    const isFollowingInProgress = useSelector(selectIsFollowingProgress)// array of users Ids\r\n\r\n    const dispatch = useDispatch()\r\n    //instead props from mdtp\r\n    //лучше не плодить субскрайберов и передать пропсами, чем юзать юзселектор в нижних компонентах?\r\n    const follow = (userId: number) => {\r\n        dispatch(followTC(userId))\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollowTC(userId))\r\n    }\r\n    const onPageChanger = (pageNumber: number) => {\r\n        dispatch(requestUsersTC(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanger = (filter: FilterType) => {\r\n        dispatch(requestUsersTC(1, pageSize, filter))\r\n    }\r\n\r\n    const history = useHistory()\r\n    //synch URL every time we getting new filter/crntPage from BLL (from inputs to BLL, BLL to subscriber component and URL)\r\n    useEffect(() => {\r\n        let query: QueryParamsType = {}\r\n        if(filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            //start url point\r\n            pathname: '/users',\r\n            //URI params from bll\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    return (\r\n        <div>\r\n            <UsersSearchForm onFilterChanger={onFilterChanger}/>\r\n            <Paginator totalItemsCount={totalUsersCount}\r\n                       pageSize={pageSize}\r\n                       currentPageNumber={currentPage}\r\n                       onPageChanger={onPageChanger}\r\n                       portionSize={10}/>\r\n            {users.map(u => <User key={u.id}\r\n                                  user={u}\r\n                                  isFollowedInProgress={isFollowingInProgress}\r\n                                  follow={follow} unfollow={unfollow}/>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n// types\r\ntype QueryParamsType = { term?: string, page?: string, friend?: string }","import {useSelector} from 'react-redux'\r\nimport React from 'react'\r\nimport {UsersList} from './UsersList'\r\nimport {Preloader} from '../common/Preloader/Preloader'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {selectIsLoading} from '../../redux/users-selectors'\r\n\r\n\r\nconst UsersPage: React.FC = () => {\r\n    const isLoading = useSelector(selectIsLoading)\r\n    return (\r\n        <>\r\n            {isLoading ? <Preloader/> : null}\r\n            <UsersList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default compose<React.ComponentType>(withAuthRedirect)(UsersPage)\r\n","//типизация redux-form\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\"\r\nimport React, { FC } from \"react\"\r\nimport {Input} from \"../../common/FormsWithValidationErrors/FormsWithValidationErrors\"\r\n//validator for Field from another file\r\nimport {required} from \"../../../utils/validators\";\r\nimport {LoginFormValuesType} from \"../LoginPage\";\r\nimport classes from \"./../../common/FormsWithValidationErrors/FormsWithValidationErrors.module.css\";\r\n\r\ntype PropsType = { captchaUrl: string | null }\r\n\r\n//деструктуризация пропсов, достаем из них нужные айтемы, чтобы постоянно не писать props.error\r\nconst LoginForm: FC<InjectedFormProps<LoginFormValuesType, PropsType> & PropsType> = ({handleSubmit, error, captchaUrl}) => {\r\n      //handleSubmit прокинул HOC, он делает e.preventDefault, передает значения из инпутов наверх упакуя в объект\r\n      return <form onSubmit={handleSubmit}>\r\n          <div><Field component={Input} validate={[required]} name=\"email\" placeholder=\"Email\" type='email'/></div>\r\n          <div><Field component={Input} validate={[required]} name=\"password\" placeholder=\"Password\" type='password'/>\r\n          </div>\r\n          <div><Field component={Input} name=\"rememberMe\" type=\"checkbox\"/> remember me</div>\r\n          {captchaUrl && <img src={captchaUrl} alt='captcha'/>}\r\n          {captchaUrl && <Field component={Input} placeholder='Enter symbols from image' name='captchaInput' validate={[required]} />}\r\n          {error && <div className={classes.formSummaryError}>{error}</div>}\r\n          <div>\r\n              <button>Login</button>\r\n          </div>\r\n      </form>\r\n  }\r\n\r\n//HOC, оборачиваем им форму\r\nexport const LoginReduxForm = reduxForm<LoginFormValuesType, PropsType>({\r\n    //имя для этой формы\r\n    form: 'login'\r\n})(LoginForm)","import React, {FC} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from '../../redux/auth-reducer'\r\nimport {LoginReduxForm} from './LoginForm/LoginForm'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {RootStateType} from '../../redux/store'\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captchaInput: string\r\n}\r\nexport const LoginPage: FC = () => {\r\n    const captchaUrl = useSelector<RootStateType, string | null>(state => state.auth.captchaUrl)\r\n    const isAuth = useSelector<RootStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    const dispatch = useDispatch()\r\n    //сюда придет инфа по инпутам, собранная handleSubmit {login: 'что ввел', rememberMe: true} и тд\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(loginTC(formData.email, formData.password, formData.rememberMe, formData.captchaInput))\r\n    }\r\n\r\n    if(isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {dialogsReducer} from './dialogs-reducer';\r\nimport {userReducer} from './users-reducer';\r\nimport {authReducer} from './auth-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport {appReducer} from './app-reducer'\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: userReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    //redux-form\r\n    form: formReducer\r\n});\r\n\r\n\r\n//store for ReduxDevTools\r\n//расширение добавит в глобальный window __REDUX_D.., если его нет то обычный compose\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer,composeEnhancers( applyMiddleware(thunkMiddleware)));\r\n\r\n//обычный стор\r\n//export let store: Store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n\r\n//нужно для того, чтобы видеть store в консоли\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react'\r\nimport {Preloader} from \"../components/common/Preloader/Preloader\";\r\n\r\n//WCP - wrapped component props\r\n//HOC возвращает новую компоненту, а не JSX\r\nexport function withSuspense <WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    //для lazy, в fallback указываем компоненту, кот. будет показываться пока ждем загрузки\r\n    return (props: WCP) => <React.Suspense fallback={<Preloader/>}>\r\n        <WrappedComponent {...props}/>\r\n    </React.Suspense>\r\n}\r\n\r\n","import React from \"react\"\r\nimport s from \"./Page404.module.css\"\r\n\r\nexport const Page404 = () => {\r\n    return (\r\n      <div className={s.block}>\r\n          <div className={s.c}>\r\n              <div className={s._404}>404</div>\r\n              <hr/>\r\n              <div className={s._1}>THE PAGE</div>\r\n              <div className={s._2}>WAS NOT FOUND</div>\r\n              <a className={s.btn} href='#/profile'>BACK TO PROFILE</a>\r\n          </div>\r\n      </div>\r\n    )\r\n}","//функция кот принимает State целиком, достает только то, что нужно компоненте и передаёт это в бизнес в mStP\r\n//это нужно, чтобы мы решим изменить архитектуру стейта, чтобы не исправлять в каждом mStP, мы исправим в 1 месте - здесь\r\nimport {RootStateType} from './store'\r\n\r\n\r\nexport const selectIsAuth = (state: RootStateType) => {\r\n    return state.auth.isAuth\r\n}\r\nexport const selectCurrentUserLogin = (state: RootStateType) => {\r\n    return state.auth.login\r\n}","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {logoutTC} from '../../redux/auth-reducer'\r\nimport {Avatar, Button, Col, Image, Layout, Menu, Row, Typography} from 'antd'\r\nimport {selectCurrentUserLogin, selectIsAuth} from '../../redux/auth-selectors'\r\n\r\nconst {Header} = Layout\r\n\r\n\r\nexport const AppHeader: React.FC = () => {\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n\r\n    const dispatch = useDispatch()\r\n    const logout = () => dispatch(logoutTC())\r\n    return (\r\n        <Header>\r\n            <Row>\r\n                <Col span={4}>\r\n                    <Image\r\n                        width={'69px'}\r\n                        src=\"https://i.ibb.co/HN350sc/70a3b023-88a2-4ebb-a063-784ca54ae184-200x200.png\"\r\n                        alt=\"logo\"/></Col>\r\n                <Col span={16}>\r\n                    <Menu theme=\"dark\"\r\n                          mode=\"horizontal\">\r\n                        <Menu.Item key=\"1\">In Progress</Menu.Item>\r\n                    </Menu>\r\n                </Col>\r\n                {isAuth\r\n                    ?\r\n                    <>\r\n                        <Col span={1}>\r\n                            <Avatar size={40}>{login}</Avatar>\r\n                        </Col>\r\n                        <Col span={3}>\r\n                            <Button onClick={logout}>Log Out</Button>\r\n                        </Col>\r\n                    </>\r\n                    :\r\n                    <Col span={4}>\r\n                        <Button><Link to={'/login'}>Login</Link></Button>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        </Header>\r\n    )\r\n}","import React, {FC} from 'react'\r\nimport './App.css'\r\nimport News from './components/News/News'\r\nimport Music from './components/Music/Music'\r\nimport Settings from './components/Settings/Settings'\r\nimport {HashRouter, Link, Redirect, Route, Switch, withRouter} from 'react-router-dom'\r\nimport UsersContainer from './components/Users/UsersPage'\r\nimport {LoginPage} from './components/Login/LoginPage'\r\nimport {connect, Provider} from 'react-redux'\r\nimport {initializeAppTC} from './redux/app-reducer'\r\nimport {RootStateType, store} from './redux/store'\r\nimport {Preloader} from './components/common/Preloader/Preloader'\r\nimport {compose} from 'redux'\r\nimport {withSuspense} from './hoc/withSuspense'\r\nimport {Page404} from './components/common/Page404/Page404'\r\n\r\n//antd\r\nimport 'antd/dist/antd.css'\r\nimport {Breadcrumb, Layout, Menu} from 'antd'\r\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from '@ant-design/icons'\r\nimport {AppHeader} from './components/Header/AppHeader'\r\n\r\nconst {SubMenu} = Menu\r\nconst {Content, Footer, Sider} = Layout\r\n\r\n\r\n//компонента не попадает в бандл(вебпак собирает все файлы в 1), она будет в своем бандле и только когда она не понадобится\r\n//это ускоряет стартовую загрузку, но медленнее, когда перейдем к этой компоненте\r\nconst DialogsPage = React.lazy(() => import('./components/Dialogs/Dialogs'))\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\r\n//чтобы не оборачивать при каждой перерисовке?\r\nconst SuspendedDialogs = withSuspense(DialogsPage)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = { initializingApp: () => void }\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        //server errors/offline\r\n        alert('Some error occurred')\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializingApp()\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    // clear junk before comp dies\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        //we see preloader before compDidMount works\r\n        if (!this.props.isInitialized) {\r\n            return <Preloader/>\r\n        }\r\n        //В Profile /:userId param for withRouter props (60)\r\n        // ? after userId makes param optional, so if we haven't it in url, another profile will be uploaded(in component code)\r\n        return (\r\n            <Layout>\r\n                <AppHeader/>\r\n                <Content style={{padding: '0 50px'}}>\r\n                    <Breadcrumb style={{margin: '16px 0'}}>\r\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                        <Sider className=\"site-layout-background\" width={200}>\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                defaultSelectedKeys={['1']}\r\n                                /*defaultOpenKeys={['My Profile']}*/\r\n                                style={{height: '100%'}}\r\n                            >\r\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\r\n                                    <Menu.Item key=\"1\"><Link to=\"/profile\">Profile</Link></Menu.Item>\r\n                                    <Menu.Item key=\"2\"><Link to=\"/dialogs\">Dialogs</Link></Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Users\">\r\n                                    <Menu.Item key=\"5\"><Link to=\"/users\">Users</Link></Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"Others\">\r\n                                    <Menu.Item key=\"9\"> <Link to=\"/news\">News</Link>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"10\"> <Link to=\"/music\">Music</Link>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key=\"11\"> <Link to=\"/settings\">Settings</Link>\r\n                                    </Menu.Item>\r\n                                </SubMenu>\r\n                            </Menu>\r\n                        </Sider>\r\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\r\n                            <Switch>\r\n                                <Route exact path={'/'} render={() => <Redirect to={'/profile'}/>}/>\r\n                                <Route path=\"/dialogs\"\r\n                                       render={() => <SuspendedDialogs/>}/>\r\n                                <Route path=\"/profile/:userId?\"\r\n                                       render={() => <SuspendedProfile/>}/>\r\n                                <Route path=\"/users\"\r\n                                       render={() => <UsersContainer/>}/>\r\n                                <Route path=\"/news\" component={News}/>\r\n                                <Route path=\"/music\" component={Music}/>\r\n                                <Route path=\"/settings\" component={Settings}/>\r\n\r\n                                <Route path=\"/login\" component={LoginPage}/>\r\n                                <Route path={'/404'} render={() => <Page404/>}/>\r\n                                <Redirect from={'*'} to={'/404'}/>\r\n                            </Switch>\r\n                        </Content>\r\n                    </Layout>\r\n                </Content>\r\n                <Footer style={{textAlign: 'center'}}>\r\n                    Social network prototype ©2020 Created by Mikhail Kalatsei\r\n                </Footer>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    isInitialized: state.app.isInitialized\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    withRouter, //for taking URI-params\r\n    connect(mapStateToProps, {initializingApp: initializeAppTC}))(App)\r\n\r\n\r\n//this component for correct work App.test\r\nexport const MainApp: FC = () => (\r\n    //HashRouter for github pages\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n)","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {MainApp} from './App';\r\n\r\nReactDOM.render(\r\n    <MainApp/>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsWithValidationErrors_formControl__8VE6q\",\"error\":\"FormsWithValidationErrors_error__3I0hX\",\"formSummaryError\":\"FormsWithValidationErrors_formSummaryError__68DeX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Page404_block__1a3GG\",\"c\":\"Page404_c__2ANwZ\",\"_404\":\"Page404__404__3yze_\",\"_1\":\"Page404__1__3qdCo\",\"_2\":\"Page404__2__2rNqX\",\"text\":\"Page404_text__GTBsp\",\"btn\":\"Page404_btn__2nqtV\",\"right\":\"Page404_right__3mVuj\"};","import styles from \"./Preloader.module.css\"\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader: React.FC = () => <div className={styles.spinnerContainer}>\r\n    <img src={preloader} alt={\"Preloader spinner\"}/>\r\n</div>;","import React, { FC } from \"react\"\r\nimport classes from \"./FormsWithValidationErrors.module.css\"\r\nimport {WrappedFieldProps} from \"redux-form\"\r\n\r\n//rest оператор, деструктуризацией достаем инпут, мета, а остальное оставить в пропсы\r\nexport const Textarea: FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    //если был в фокусе и не проходит валидатор.тс (в meta.error текст ошибки, либо null/undefined)\r\n    const hasError = meta.touched && meta.error\r\n    return <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\r\n        <textarea {...input} {...props}/>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    //если был в фокусе и не проходит валидатор.тс (в meta.error текст ошибки, либо null/undefined)\r\n    const hasError = meta.touched && meta.error\r\n    return <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\r\n        <input {...input} {...props}/>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n}"],"sourceRoot":""}