{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useEffect","setStatus","status","useState","editMode","setEditMode","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","profile","onSubmit","className","classes","formSummaryError","Field","placeholder","name","validate","component","Input","type","Textarea","Object","keys","contacts","map","key","ProfileData","isOwner","onClick","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","alt","target","files","length","selectedFile","updatePhoto","initialValues","formData","updateProfile","then","Post","id","item","message","likesCount","maxLength10","maxLengthCreator","AddPostFormRedux","required","MyPostsMemorized","React","memo","post","postsData","reverse","postsBlock","values","addPost","newPostText","posts","connect","state","profilePage","addPostAC","Profile","MyPostsContainer","ProfileContainer","document","title","userId","Number","this","match","params","authorizedUserId","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","withAuthRedirect","auth","isAuth","getUserProfileTC","getStatusTC","updateStatusTC","updatePhotoTC","updateProfileTC","withRouter"],"mappings":"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","file":"static/js/3.75d1a34a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3qxPW\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Nvkd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3zf98\",\"posts\":\"MyPosts_posts__2ZcJR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1evpY\"};","import React, {ChangeEvent, useEffect, useState, FC} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus: FC<PropsType> = (props) => {\r\n    //синхронизируй компоненту с состоянием, когда меняется props.status\r\n    useEffect(() => setStatus(props.status), [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        //отправляем в глобал стейт и на сервак, выходя из editMode\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    return (\r\n      <>\r\n          <b>Status: </b>\r\n          {editMode\r\n            ? <span>\r\n                <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </span>\r\n            : <span>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"empty status\"}</span>\r\n            </span>}\r\n      </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/FormsWithValidationErrors/FormsWithValidationErrors\";\r\nimport classes from \"../../common/FormsWithValidationErrors/FormsWithValidationErrors.module.css\";\r\nimport {ProfileType} from \"../../../types/commonTypes\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\n// fix types\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, error, profile}) => (\r\n  <form onSubmit={handleSubmit}>\r\n      <button>Save changes</button>\r\n      {error && <div className={classes.formSummaryError}>{error}</div>}\r\n      <ul>\r\n          <li><b>Full name</b>: <Field placeholder=\"Full name\" name='fullName' validate={[]} component={Input}/></li>\r\n          <li><b>Looking for a job</b>: <Field component={Input} name=\"lookingForAJob\" type=\"checkbox\"/></li>\r\n          <li><b>My skills</b>: <Field placeholder='My skills' name='lookingForAJobDescription' validate={[]}\r\n                                       component={Textarea}/></li>\r\n          <li><b>About Me</b>: <Field placeholder='About me' name='aboutMe' validate={[]} component={Textarea}/></li>\r\n          <li>\r\n              <b>Contacts</b>:\r\n              <ul>\r\n                  {Object.keys(profile.contacts).map(key => {\r\n                      //мапимся по массиву ключей, в тайтле сам ключ, в валуе обращаемся через индекс obj[\"key\"]\r\n                      return <li key={key}><b>{key}: </b><Field placeholder={key} component={Input} name={'contacts.' + key}/></li>\r\n                  })}\r\n              </ul>\r\n          </li>\r\n      </ul>\r\n  </form>\r\n);\r\n\r\n//HOC, оборачиваем им форму\r\nexport const ProfileDataReduxForm = reduxForm<ProfileType ,PropsType>(\r\n  //имя для этой формы\r\n  {form: 'edit-profile'}\r\n)(ProfileDataForm)","import React, {ChangeEvent, useState} from 'react';\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatus} from './ProfileStatus';\r\nimport userPhoto from \"../../../assets/images/default-user-avatar.svg\";\r\nimport {ProfileDataReduxForm} from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/commonTypes\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    updatePhoto: (photo: File) => void\r\n    updateProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, ...props}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    //наш профиль в иниц стейте = null, поэтому когда он null рисуем колесо\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    //вызов санки когда выбираем фото\r\n    const MainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            const selectedFile = e.target.files[0]\r\n            props.updatePhoto(selectedFile)\r\n        }\r\n    }\r\n    //сюда придет инфа по инпутам, собранная handleSubmit {aboutMe: 'что ввел', lookingFAJ: true} и тд\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        props.updateProfile(formData).then(() => setEditMode(false))\r\n    }\r\n    return (\r\n      <div>\r\n          <div className={classes.descriptionBlock}>\r\n              <img src={profile.photos.large || userPhoto} className={classes.mainPhoto} alt={\"something wrong\"}/>\r\n              <div>{props.isOwner ? <input type='file' onChange={MainPhotoSelected}/> : null}</div>\r\n              <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n          </div>\r\n          {editMode\r\n            ? <ProfileDataReduxForm initialValues={profile} onSubmit={onSubmit} profile={profile}/>\r\n            : <ProfileData profile={profile} isOwner={props.isOwner}\r\n                           goToEditMode={() => setEditMode(true)}\r\n            />}\r\n      </div>\r\n    )\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, ...props}) => {\r\n    return <>\r\n        {props.isOwner && <button onClick={props.goToEditMode}>Edit</button>}\r\n        <ul>\r\n            <li><b>Full name</b>: {profile.fullName}</li>\r\n            <li><b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}</li>\r\n            {profile.lookingForAJob && <li><b>My skills</b>: {profile.lookingForAJobDescription}</li>}\r\n            <li><b>About Me</b>: {profile.aboutMe}</li>\r\n            <li>\r\n                <b>Contacts</b>:\r\n                <ul>\r\n                    {Object.keys(profile.contacts).map(key => {\r\n                        //мапимся по массиву ключей, в тайтле сам ключ, в валуе обращаемся через индекс obj[\"key\"]\r\n                        return <Contact contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} key={key}/>\r\n                    })}\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </>\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\nexport const Contact: React.FC<ContactPropsType> = (props) => (\r\n  <li><b>{props.contactTitle}</b>: {props.contactValue}</li>\r\n)\r\nexport default ProfileInfo;","import classes from \"../Post/Post.module.css\";\r\nimport React from \"react\";\r\nimport { PostType } from \"../../../../types/commonTypes\";\r\n\r\ntype PropsType = PostType\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div key={props.id} className={classes.item}>\r\n      <img src=\"https://i.ibb.co/0t8zmD0/pngwing-com.png\" alt=\"avatar\" />\r\n      {props.message}\r\n      <div>\r\n        <span>{props.likesCount} likes</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Post;\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\n//validator for Field from another file\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators\";\r\nimport {Textarea} from \"../../../common/FormsWithValidationErrors/FormsWithValidationErrors\";\r\n\r\ntype PropsType = {}\r\n\r\n//вызываем за компонентой, т.к. каждый раз приходит новая функция и зацикливается перерисовка(нет useCallback)\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea} name='newPostText' placeholder=\"Type a new post\" validate={[required, maxLength10]}/>\r\n        <button>Add post</button>\r\n    </form>\r\n}\r\n\r\nexport type AddPostFormValuesType = {newPostText: string}\r\n\r\nexport const AddPostFormRedux = reduxForm<AddPostFormValuesType, PropsType>({\r\n    form: \"addPostForm\"\r\n})(AddPostForm)","import React from \"react\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {AddPostFormRedux, AddPostFormValuesType} from \"./AddPostForm/AddPostForm\";\r\nimport {PostType} from \"../../../types/commonTypes\";\r\n\r\nexport type MapStatePropsType = {\r\n    postsData: Array<PostType>\r\n}\r\nexport type MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPost: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    let addNewPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    let post = [...props.postsData]\r\n      //reverse мутабельный метод массива(не делает копию, а меняет изначальный массив по ссылке)\r\n      //поэтому создаем копию\r\n      .reverse()\r\n      .map(post =>\r\n        <Post id={post.id}\r\n              key={post.id}\r\n              message={post.message}\r\n              likesCount={post.likesCount}/>)\r\n    return (\r\n      <div className={classes.postsBlock}>\r\n          <h3>My Posts</h3>\r\n          <AddPostFormRedux onSubmit={addNewPost}/>\r\n          <div className={classes.posts}>{post}</div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport const MyPostsMemorized = React.memo(MyPost);\r\n\r\n","import {addPostAC} from \"../../../redux/profile-reducer\";\r\nimport {MyPostsMemorized, MapStatePropsType, MapDispatchPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../../redux/store\";\r\n\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n        //перерисуйся, когда что-то из этого изменится\r\n    }\r\n}\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, RootStateType>(mapStateToProps, {addPost: addPostAC}) (MyPostsMemorized);\r\n\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/commonTypes\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    updatePhoto: (photo: File) => void\r\n    updateProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n      <div>\r\n          <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status}\r\n                       updateStatus={props.updateStatus}\r\n                       updatePhoto={props.updatePhoto} updateProfile={props.updateProfile}/>\r\n          <MyPostsContainer/>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/store\";\r\nimport {getStatusTC, getUserProfileTC, updatePhotoTC, updateProfileTC, updateStatusTC} from \"../../redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../types/commonTypes\";\r\n\r\n//todo: refactor to hooks\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    updatePhoto: (photo: File) => void\r\n    updateProfile: (changedProfile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamType>\r\n\r\n//1-ый контейнер для AJAX запросов, setInterval и т.д. (грязной работы), рисует презентационную\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        document.title = \"Profile\";\r\n        //айди из URL (withRouter, Route)\r\n        let userId: number | null = Number(this.props.match.params.userId)\r\n        //если параметра userId нет (url выглядит как /profile/), то вставить айди, пришедший с сервака\r\n        //если и он null, то \"\" (временно)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId ? this.props.authorizedUserId : null\r\n        }\r\n        if (!userId) {\r\n            console.error('userId should exists in URI params or in the state (\"authorizedUserId\")')\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        //чтобы компонента обновлялась, если после вмонтирования меняем юзера\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //копирует и передает все пропсы\r\n        return <Profile {...this.props}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}\r\n          //если нет userId, то owner страницы (для показа кнопки загрузки фото)\r\n                        isOwner={!this.props.match.params.userId}\r\n                        updatePhoto={this.props.updatePhoto}\r\n        />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\nexport default compose<React.ComponentType>(\r\n  withAuthRedirect,\r\n  connect(mapStateToProps, {getUserProfile: getUserProfileTC, getStatus: getStatusTC, updateStatus: updateStatusTC, updatePhoto: updatePhotoTC, updateProfile: updateProfileTC}),\r\n  withRouter\r\n)(ProfileContainer)"],"sourceRoot":""}