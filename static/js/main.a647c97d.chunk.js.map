{"version":3,"sources":["hoc/withAuthRedirect.tsx","api/profile-api.ts","redux/profile-reducer.ts","api/api.ts","assets/images/default-user-avatar.svg","redux/dialogs-reducer.ts","components/Users/Users.module.css","components/common/Preloader/Preloader.module.css","assets/images/preloader.svg","components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","api/user-api.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/UsersList.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","redux/store.ts","hoc/withSuspense.tsx","components/common/Page404/Page404.tsx","App.tsx","index.tsx","components/common/FormsWithValidationErrors/FormsWithValidationErrors.module.css","components/common/Page404/Page404.module.css","components/common/Preloader/Preloader.tsx","components/common/FormsWithValidationErrors/FormsWithValidationErrors.tsx","utils/validators.ts","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","response","changedProfile","initialState","postsData","id","v1","message","likesCount","profile","profileReducer","action","type","newPost","newPostText","filter","post","postId","photos","addPostAC","setStatusAC","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","alert","updatePhoto","photo","updateProfile","getState","Error","stopSubmit","messages","substring","length","toLowerCase","Promise","reject","ResultCodes","ResultCodeForCaptcha","axios","create","withCredentials","baseURL","module","exports","dialogsData","name","avatar","messagesData","dialogsReducer","newMessage","newMessageText","mess","messageId","addMessageAC","Navbar","className","classes","nav","item","activeClassName","activeLink","News","Music","Settings","authAPI","email","password","rememberMe","captcha","delete","securityAPI","login","isLoading","captchaUrl","setAuthUserDataAC","payload","getCaptchaUrlSuccessAC","getAuthUserDataTC","meData","Success","getCaptchaUrlTC","url","isInitialized","toggleIsLoadingAC","usersAPI","currentPage","pageSize","searchInput","friend","usersData","totalUsersCount","isFollowingInProgress","followSuccessAC","unfollowSuccessAC","setFilterAC","toggleFollowingProgressAC","Paginator","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","map","key","random","currentPageNumber","selectedPage","page","onPageChanger","User","user","src","small","userPhoto","alt","followed","disabled","isFollowedInProgress","some","unfollow","follow","formValidation","values","UsersSearchForm","React","memo","initialValues","validate","onSubmit","setSubmitting","onFilterChanger","isSubmitting","as","value","UsersList","users","u","getUsers","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsLoading","getIsFollowingProgress","getUsersFilter","UsersContainer","this","Preloader","Component","compose","document","title","pageNumber","newUsersData","items","totalCount","Header","header","loginBlock","logout","LoginReduxForm","reduxForm","form","handleSubmit","error","Field","component","Input","required","placeholder","formSummaryError","captchaInput","CaptchaIsRequired","errorMessage","_error","rootReducer","combineReducers","profilePage","dialogsPage","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","Suspense","fallback","Page404","s","block","c","_404","_1","_2","btn","href","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandledErrors","e","initializingApp","addEventListener","removeEventListener","exact","path","render","Login","from","AppContainer","withRouter","promise","all","MainApp","ReactDOM","getElementById","spinnerContainer","preloader","Textarea","input","meta","hasError","touched","formControl","undefined","maxLengthCreator","maxLength"],"mappings":"yKAQIA,EAA6B,SAACC,GAAD,MAA2B,CAACC,OAAQD,EAAME,KAAKD,SAIzE,SAASE,EAAsBC,GAWlC,OAAOC,YACLN,EAA4B,GADvBM,EATuE,SAACC,GAAU,IAEhFL,EAAwBK,EAAxBL,OAAWM,EAFqE,YAExDD,EAFwD,YAIrF,OAAKL,EAEE,kBAACG,EAAqBG,GAFT,kBAAC,IAAD,CAAUC,GAAG,gB,0VCX5BC,EAAa,SACXC,GACP,OAAOC,IAASC,IAAT,kBAAqCF,IACzCG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAHdN,EAAa,SAKRC,GACV,OAAOC,IAASC,IAAT,yBAAuCF,IAC3CG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAPdN,EAAa,SASTO,GACT,OAAOL,IAASM,IAAT,iBAAgD,CAACD,WACrDH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAXdN,EAAa,SAaVS,GAER,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClBP,IAASM,IAAT,gBAAqEE,EAAU,CAElFG,QAAS,CACL,eAAgB,yBAGrBT,MAAK,SAAAU,GAAQ,OAAIA,EAASR,SAvBxBN,EAAa,SAyBRe,GACV,OAAOb,IAASM,IAAT,UAAyCO,GAC7CX,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SC7BrBU,EAAe,CACjBC,UAAW,CACP,CAACC,GAAIC,cAAMC,QAAS,mBAAoBC,WAAY,GACpD,CAACH,GAAIC,cAAMC,QAAS,qBAAsBC,WAAY,IACtD,CAACH,GAAIC,cAAMC,QAAS,eAAMC,WAAY,IAE1CC,QAAS,KACTf,OAAQ,IAGCgB,EAAiB,WAAkE,IAAjEhC,EAAgE,uDAAxDyB,EAAcQ,EAA0C,uCAC3F,OAAQA,EAAOC,MACX,IAAK,mBACD,IAAIC,EAAU,CAACR,GAAIC,cAAMC,QAASI,EAAOG,YAAaN,WAAY,GAClE,OAAO,eACA9B,EADP,CAEI0B,UAAU,GAAD,mBAAM1B,EAAM0B,WAAZ,CAAuBS,MAExC,IAAK,sBACD,OAAO,eACAnC,EADP,CAEI0B,UAAW1B,EAAM0B,UAAUW,QAAO,SAAAC,GAAI,OAAIA,EAAKX,KAAOM,EAAOM,YAErE,IAAK,sBACD,OAAO,eACAvC,EADP,CAEI+B,QAASE,EAAOF,UAExB,IAAK,qBACD,OAAO,eACA/B,EADP,CAEIgB,OAAQiB,EAAOjB,SAEvB,IAAK,6BACD,OAAO,eACAhB,EADP,CAGI+B,QAAQ,eAAK/B,EAAM+B,QAAZ,CAAqBS,OAAQP,EAAOO,WAEnD,QACI,OAAOxC,IAMNyC,EAAY,SAACL,GAAD,MAA0B,CAACF,KAAM,mBAAoBE,gBAGjEM,EAAc,SAAC1B,GAAD,MAAqB,CAACkB,KAAM,qBAAsBlB,WAKhE2B,EAAiB,SAACjC,GAAD,8CAA+B,WAAOkC,GAAP,eAAAC,EAAA,sEACtCpC,EAAsBC,GADgB,OACnDK,EADmD,OAEzD6B,EARmD,CAACV,KAAM,sBAAuBH,QAQ3DhB,IAFmC,2CAA/B,uDAIjB+B,EAAY,SAACpC,GAAD,8CAA+B,WAAOkC,GAAP,eAAAC,EAAA,sEACjCpC,EAAyBC,GADQ,OAC9CK,EAD8C,OAEpD6B,EAASF,EAAY3B,IAF+B,2CAA/B,uDAIZgC,EAAe,SAAC/B,GAAD,8CAA+B,WAAO4B,GAAP,SAAAC,EAAA,+EAEhCpC,EAAwBO,GAFQ,OAG3B,IAH2B,OAG1CgC,YACLJ,EAASF,EAAY1B,IAJ0B,gDAOnDiC,MAAM,EAAD,IAP8C,yDAA/B,uDAUfC,EAAc,SAACC,GAAD,8CAA4B,WAAOP,GAAP,eAAAC,EAAA,sEAChCpC,EAAuB0C,GADS,OAE3B,KADlBpC,EAD6C,QAE1CiC,YACLJ,EAzBoD,CAACV,KAAM,6BAA8BM,OAyB5DzB,EAAKA,KAAKyB,SAHQ,2CAA5B,uDAMdY,EAAgB,SAAC5B,GAAD,8CAA4C,WAAOoB,EAAUS,GAAjB,iBAAAR,EAAA,6DAC/DnC,EAAS2C,IAAWnD,KAAKQ,OADsC,SAElDD,EAAyBe,GAFyB,UAG7C,KADlBT,EAF+D,QAG5DiC,WAH4D,qBAK7DtC,EAL6D,gBAO7DkC,EAASD,EAAejC,IAPqC,6BASvD,IAAI4C,MAAM,0BAT6C,uCAYjEV,EAASW,YAAW,eAAgB,CAAC,SAAW,eAAGxC,EAAKyC,SAAS,GAAGC,UAAU,GAAI1C,EAAKyC,SAAS,GAAGE,OAAS,GAAGC,cAAgB5C,EAAKyC,SAAS,OAZ5E,kBAa1DI,QAAQC,OAAO9C,EAAKyC,SAAS,KAb6B,4CAA5C,0D,gCCnF7B,0GAuBYM,EACAC,EAxBZ,SAEapD,EAFb,OAEwBqD,EAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,gDACT7C,QAAS,CACL,UAAW,2C,SAiBPwC,O,qBAAAA,I,kBAAAA,M,cACAC,O,2CAAAA,M,0BCxBZK,EAAOC,QAAU,IAA0B,iD,gICGrC5C,EAAe,CACjB6C,YAAa,CACT,CACI3C,GAAI,EACJ4C,KAAM,QACNC,OAAQ,4EAEZ,CACI7C,GAAI,EACJ4C,KAAM,QACNC,OAAQ,iFAEZ,CACI7C,GAAI,EACJ4C,KAAM,OACNC,OAAQ,8IAEZ,CACI7C,GAAI,EACJ4C,KAAM,OACNC,OAAQ,4EAEZ,CACI7C,GAAI,EACJ4C,KAAM,OACNC,OAAQ,6EAGhBC,aAAc,CACV,CAAC9C,GAAIC,cAAMC,QAAS,SACpB,CAACF,GAAIC,cAAMC,QAAS,aACpB,CAACF,GAAIC,cAAMC,QAAS,UACpB,CAACF,GAAIC,cAAMC,QAAS,MACpB,CAACF,GAAIC,cAAMC,QAAS,QAIf6C,EAAiB,WAAkE,IAAjE1E,EAAgE,uDAAxDyB,EAAcQ,EAA0C,uCAC3F,OAAQA,EAAOC,MACX,IAAK,cACD,IAAIyC,EAAa,CAAChD,GAAIC,cAAMC,QAASI,EAAO2C,gBAC5C,OAAO,eACA5E,EADP,CAEIyE,aAAa,GAAD,mBAAMzE,EAAMyE,cAAZ,CAA0BE,MAK9C,IAAK,iBACD,OAAO,eACA3E,EADP,CAEIyE,aAAczE,EAAMyE,aAAapC,QAAO,SAAAwC,GAAI,OAAIA,EAAKlD,KAAOM,EAAO6C,eAE3E,QACI,OAAO9E,IAKN+E,EAAe,SAACH,GAAD,MAA6B,CAAC1C,KAAM,cAAe0C,oB,oBC7D/ER,EAAOC,QAAU,CAAC,UAAY,2B,oBCA9BD,EAAOC,QAAU,CAAC,iBAAmB,sC,oBCDrCD,EAAOC,QAAU,IAA0B,uC,mBCC3CD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,6B,wOCwBtEW,EArBU,kBAAM,yBAAKC,UAAWC,IAAQC,KACnD,yBAAKF,UAAWC,IAAQE,MACpB,kBAAC,IAAD,CAAS5E,GAAG,WAAW6E,gBAAiBH,IAAQI,YAAhD,YAEJ,yBAAKL,UAAWC,IAAQE,MACpB,kBAAC,IAAD,CAAS5E,GAAG,WAAW6E,gBAAiBH,IAAQI,YAAhD,YAEJ,yBAAKL,UAAWC,IAAQE,MACpB,kBAAC,IAAD,CAAS5E,GAAG,SAAS6E,gBAAiBH,IAAQI,YAA9C,UAEJ,yBAAKL,UAAWC,IAAQE,MACpB,kBAAC,IAAD,CAAS5E,GAAG,QAAQ6E,gBAAiBH,IAAQI,YAA7C,SAEJ,yBAAKL,UAAWC,IAAQE,MACpB,kBAAC,IAAD,CAAS5E,GAAG,SAAS6E,gBAAiBH,IAAQI,YAA9C,UAEJ,yBAAKL,UAAWC,IAAQE,MACpB,kBAAC,IAAD,CAAS5E,GAAG,YAAY6E,gBAAiBH,IAAQI,YAAjD,eCZOC,EANQ,kBACrB,sCCOaC,MARf,SAAelF,GACb,OACE,uCCMWmF,MARf,SAAkBnF,GAChB,OACE,0C,sECDSoF,EAAU,WAEf,OAAO/E,IAASC,IAAT,WAA6DC,MAAK,SAACC,GAAD,OAASA,EAAIC,SAFjF2E,EAAU,SAIbC,EAAeC,GAAsE,IAApDC,EAAmD,wDAA/BC,EAA+B,uDAAN,KAChF,OAAOnF,IAAS2B,KAA4E,aAAc,CACtGqD,QACAC,WACAC,aACAC,YACDjF,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAVd2E,EAAU,WAaf,OAAO/E,IAASoF,OAAO,cAAclF,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCbhDiF,EAAc,WAEnB,OAAOrF,IAASC,IAAT,4BAAwDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCEjFU,EAAe,CACjBf,OAAQ,KACRiF,MAAO,KACPM,MAAO,KACPC,WAAW,EACXjG,QAAQ,EACRkG,WAAY,MAoBHC,EAAoB,SAAC1F,EAAuBiF,EAAsBM,EAAsBhG,GAApE,MAC9B,CAACiC,KAAM,gBAAiBmE,QAAS,CAAC3F,SAAQiF,QAAOM,QAAOhG,YAC9CqG,EAAyB,SAACH,GAAD,MACnC,CAACjE,KAAM,0BAA2BmE,QAAS,CAACF,gBAGlCI,EAAoB,yDAC/B,WAAO3D,GAAP,uBAAAC,EAAA,sEAEyB6C,IAFzB,QAEUc,EAFV,QAGexD,aAAec,IAAY2C,UAAU,EACnBD,EAAOzF,KAA3BY,EADsC,EACtCA,GAAIgE,EADkC,EAClCA,MAAOM,EAD2B,EAC3BA,MAEhBrD,EAASwD,EAAkBzE,EAAIgE,EAAOM,GAAO,KANrD,2CAD+B,uDA4BpBS,EAAkB,yDAC7B,WAAO9D,GAAP,iBAAAC,EAAA,sEACuBmD,IADvB,OACUjF,EADV,OAEUoF,EAAapF,EAAK4F,IACxB/D,EAAS0D,EAAuBH,IAHpC,2CAD6B,uDChEzB1E,EAAe,CAACmF,eAAe,GAgBxBC,EAAoB,SAACX,GAAD,MAAyB,CAAChE,KAAM,wBAAyBgE,cCjB7EY,EAAW,WACuE,IAAlFC,EAAiF,uDAAnE,EAAGC,EAAgE,uDAArD,GAAIC,EAAiD,uDAAnC,GAAIC,EAA+B,uDAAN,KAChF,OAAOvG,IAASC,IAAmC,qBAAcmG,EAAd,kBAAmCC,EAAnC,iBAAoDC,IAA4B,OAAXC,EAAkB,GAAlB,kBAAkCA,KAEvJrG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAJd+F,EAAW,SAOTpG,GACP,OAAOC,IAAS2B,KAAT,iBAAyC5B,GAAU,IACvDG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SATd+F,EAAW,SAWPpG,GACT,OAAOC,IAASoF,OAAT,iBAA0BrF,IAC9BG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCZrBU,EAAe,CACjB0F,UAAW,GACXH,SAAU,GACVI,gBAAiB,EACjBL,YAAa,EACbb,WAAW,EACXmB,sBAAuB,GACvBhF,OAAQ,CACJ4E,YAAa,GACbC,OAAQ,OA+DHI,EAAkB,SAAC5G,GAAD,MAAqB,CAACwB,KAAM,cAAexB,WAC7D6G,EAAoB,SAAC7G,GAAD,MAAqB,CAACwB,KAAM,gBAAiBxB,OAAQA,IAIzE8G,EAAc,SAACnF,GAAD,MAAyB,CAACH,KAAM,kBAAmBmE,QAAShE,IAI1EoF,EAA4B,SAACJ,EAAgC3G,GAAjC,MAAqD,CAC1FwB,KAAM,iCAAkCmF,wBACxC3G,W,0BC5ESgH,EAA2B,SAACpH,GAMrC,IAHA,IAAIqH,EAAaC,KAAKC,KAAKvH,EAAMwH,gBAAkBxH,EAAM0G,UAErDe,EAAuB,GAClBC,EAAI,EAAGA,GAAKL,EAAYK,IAC7BD,EAAME,KAAKD,GAGf,IAAIE,EAAeN,KAAKC,KAAKF,EAAarH,EAAM6H,aAVD,EAYPC,mBAAS,GAZF,mBAY1CC,EAZ0C,KAY3BC,EAZ2B,KAc3CC,GAAyBF,EAAgB,GAAK/H,EAAM6H,YAAc,EAClEK,EAAyBH,EAAgB/H,EAAM6H,YAEnD,OACE,yBAAKlD,UAAWwD,IAAOC,WAEfL,EAAgB,EACZ,4BAAQM,QAAS,kBAAML,EAAiBD,EAAgB,KAAxD,YACA,KACPN,EAEE1F,QAAO,SAAAuG,GAAC,OAAIA,GAAKL,GAAyBK,GAAKJ,KAC/CK,KAAI,SAAAD,GAAC,OACJ,0BAAME,IAAKlB,KAAKmB,SAAU9D,UAAW3E,EAAM0I,oBAAsBJ,EAAIH,IAAOQ,aAAeR,IAAOS,KAC5FP,QAAS,WACLrI,EAAM6I,cAAcP,KACpBA,MAIVV,EAAeG,EACX,4BAAQM,QAAS,kBAAML,EAAiBD,EAAgB,KAAxD,QACA,O,6CClCLe,GAA4B,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAS/I,EAAX,+BACrC,6BACY,8BACI,6BACI,kBAAC,IAAD,CAASE,GAAI,YAAc6I,EAAK1H,IAC5B,yBACI2H,IAEyB,MAArBD,EAAK7G,OAAO+G,MAAgBF,EAAK7G,OAAO+G,MAAQC,KACpDvE,UAAWwD,IAAOe,UAClBC,IAAK,aAGjB,6BACKJ,EAAKK,SAEF,4BAAQC,SAAUrJ,EAAMsJ,qBAAqBC,MAAK,SAAClI,GAAD,OAAQA,IAAO0H,EAAK1H,MAC9DgH,QAAS,WAELrI,EAAMwJ,SAAST,EAAK1H,MAHhC,YAKE,4BAAQgI,SAAUrJ,EAAMsJ,qBAAqBC,MAAK,SAAClI,GAAD,OAAQA,IAAO0H,EAAK1H,MAC9DgH,QAAS,WACLrI,EAAMyJ,OAAOV,EAAK1H,MAF9B,YAMtB,8BACgB,8BACA,6BAAM0H,EAAK9E,MACX,6BAAM8E,EAAKrI,Y,SCnC7BgJ,GAAiB,SAACC,GAEpB,MADe,IAGNC,GAAuCC,IAAMC,MAAK,SAAC9J,GAM5D,OAAO,kBAAC,KAAD,CACH+J,cAAe,CAACpD,YAAa,GAAIC,OAAQ,MACzCoD,SAAUN,GACVO,SARW,SAACN,EAAD,GAA8F,IAAxEO,EAAuE,EAAvEA,cAEjClK,EAAMmK,gBAAgBR,GACtBO,GAAc,MAOb,gBAAEE,EAAF,EAAEA,aAAF,OACG,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOxI,KAAK,OAAOqC,KAAK,gBACxB,kBAAC,KAAD,CAAOA,KAAK,SAASoG,GAAG,UACpB,4BAAQC,MAAM,QAAd,OACA,4BAAQA,MAAM,QAAd,WACA,4BAAQA,MAAM,SAAd,eAEJ,4BAAQ1I,KAAK,SAASyH,SAAUe,GAAhC,iBCZHG,GAA2B,SAACvK,GAAD,OACpC,6BACI,kBAAC4J,GAAD,CAAiBO,gBAAiBnK,EAAMmK,kBACxC,kBAAC,EAAD,CAAW3C,gBAAiBxH,EAAM8G,gBACvBJ,SAAU1G,EAAM0G,SAChBgC,kBAAmB1I,EAAMyG,YACzBoC,cAAe7I,EAAM6I,cACrBhB,YAAa,KAEpB7H,EAAMwK,MAAMjC,KAAI,SAAAkC,GAAC,OAAI,kBAAC,GAAD,CAAMjC,IAAKiC,EAAEpJ,GACP0H,KAAM0B,EACNnB,qBAAsBtJ,EAAMsJ,qBAC5BG,OAAQzJ,EAAMyJ,OAAQD,SAAUxJ,EAAMwJ,gB,qCCvBhEkB,GAAWC,cAFQ,SAACjL,GAAD,OAA0BA,EAAMkL,UAAU/D,aAEjB,SAAC2D,GAAD,OAAWA,EAAMzI,QAAO,SAAA0I,GAAC,OAAI,QACzEI,GAAc,SAACnL,GACxB,OAAOA,EAAMkL,UAAUlE,UAEdoE,GAAqB,SAACpL,GAC/B,OAAOA,EAAMkL,UAAU9D,iBAEdiE,GAAiB,SAACrL,GAC3B,OAAOA,EAAMkL,UAAUnE,aAEduE,GAAe,SAACtL,GACzB,OAAOA,EAAMkL,UAAUhF,WAEdqF,GAAyB,SAACvL,GACnC,OAAOA,EAAMkL,UAAU7D,uBAEdmE,GAAiB,SAACxL,GAC3B,OAAOA,EAAMkL,UAAU7I,QCerBoJ,G,4MAMFtC,cAAgB,SAACpC,GACb,EAAKzG,MAAM0K,SAASjE,EAAa,EAAKzG,MAAM0G,SAAU,EAAK1G,MAAM+B,S,EAGrEoI,gBAAkB,SAACpI,GACf,EAAK/B,MAAM0K,SAAS,EAAG,EAAK1K,MAAM0G,SAAU3E,I,kEAR5CqJ,KAAKpL,MAAM0K,SAASU,KAAKpL,MAAMyG,YAAa2E,KAAKpL,MAAM0G,SAAU0E,KAAKpL,MAAM+B,U,+BAa5E,OAAO,oCACFqJ,KAAKpL,MAAM4F,UAAY,kBAACyF,GAAA,EAAD,MAAe,KACvC,kBAAC,GAAD,CAAWvE,gBAAiBsE,KAAKpL,MAAM8G,gBAC5BJ,SAAU0E,KAAKpL,MAAM0G,SACrBD,YAAa2E,KAAKpL,MAAMyG,YACxBgD,OAAQ2B,KAAKpL,MAAMyJ,OACnBD,SAAU4B,KAAKpL,MAAMwJ,SACrBX,cAAeuC,KAAKvC,cACpBsB,gBAAiBiB,KAAKjB,gBACtBK,MAAOY,KAAKpL,MAAMwK,MAClBlB,qBAAsB8B,KAAKpL,MAAM+G,6B,GA1B3BuE,aA8CdC,gBACX1L,KACAE,aAhBkB,SAACL,GAGnB,MAAO,CACH8K,MAAOE,GAAShL,GAChBgH,SAAUmE,GAAYnL,GACtBoH,gBAAiBgE,GAAmBpL,GACpC+G,YAAasE,GAAerL,GAC5BkG,UAAWoF,GAAatL,GACxBqH,sBAAuBkE,GAAuBvL,GAC9CqC,OAAQmJ,GAAexL,MAQvB,CAAC+J,ONiBe,SAACrJ,GAAD,8CACpB,WAAOkC,GAAP,SAAAC,EAAA,6DAEID,EAAS6E,GAA0B,EAAM/G,IAF7C,SAGuBoG,EAAoBpG,GAH3C,OAI4B,IAJ5B,OAIasC,YACLJ,EAAS0E,EAAgB5G,IAG7BkC,EAAS6E,GAA0B,EAAO/G,IAR9C,2CADoB,uDMjBGoJ,SN6BD,SAACpJ,GAAD,8CACtB,WAAOkC,GAAP,SAAAC,EAAA,6DAEID,EAAS6E,GAA0B,EAAM/G,IAF7C,SAIuBoG,EAAsBpG,GAJ7C,OAK4B,IAL5B,OAKasC,YACLJ,EAAS2E,EAAkB7G,IAG/BkC,EAAS6E,GAA0B,EAAO/G,IAT9C,2CADsB,uDM7BuBsK,SNEnB,SAACjE,EAAqBC,EAAkB3E,GAAxC,8CAC1B,WAAOO,GAAP,eAAAC,EAAA,6DACIiJ,SAASC,MAAQ,QAEjBnJ,EAASiE,GAAkB,IAH/B,SAIuBC,EAAkBC,EAAaC,EAAU3E,EAAO4E,YAAa5E,EAAO6E,QAJ3F,OAIUnG,EAJV,OAMI6B,EAAS4E,EAAYnF,IACrBO,EArBiD,CAACV,KAAM,wBAAyB8J,WAqBvDjF,IAC1BnE,EAvBsD,CAACV,KAAM,iBAAkB+J,aAuB3DlL,EAAKmL,QACzBtJ,EApB0D,CAC9DV,KAAM,6BAA8BkF,gBAmBFrG,EAAKoL,aAEnCvJ,EAASiE,GAAkB,IAX/B,4CAD0B,yDMNfgF,CAKbJ,I,oBCjEaW,GAZoD,SAAC9L,GAAD,OAAW,4BAAQ2E,UAAWC,KAAQmH,QACrG,yBAAK/C,IAAI,4EAA4EG,IAAI,SAEzF,yBAAKxE,UAAWC,KAAQoH,YACnBhM,EAAML,OACH,6BAAMK,EAAM2F,MAAZ,MAAqB,4BAAQ0C,QAASrI,EAAMiM,QAAvB,YAEvB,kBAAC,IAAD,CAAS/L,GAAI,UAAb,YCLKH,gBANS,SAACL,GAAD,MAA2B,CAC/CC,OAAQD,EAAME,KAAKD,OACnBiG,UAAWlG,EAAME,KAAKgG,UACtBD,MAAOjG,EAAME,KAAK+F,SAG8E,CAACsG,OX0D7E,yDAAiB,WAAO3J,GAAP,SAAAC,EAAA,sEAClB6C,IADkB,OAEb,IAFa,OAE5B1C,YAELJ,EAASwD,EAAkB,KAAM,KAAM,MAAM,IAJZ,2CAAjB,wDW1DT/F,EAV6D,SAACC,GACzE,OAAO,kBAAC,GAAWA,M,0DCsBVkM,GAAiBC,aAA0C,CAEpEC,KAAM,SAFoBD,EAjBuD,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,MAAOzG,EAAgB,EAAhBA,WAEtG,OAAO,0BAAMoE,SAAUoC,GACnB,6BAAK,kBAACE,GAAA,EAAD,CAAOC,UAAWC,KAAOzC,SAAU,CAAC0C,MAAWzI,KAAK,QAAQ0I,YAAY,QAAQ/K,KAAK,WAC1F,6BAAK,kBAAC2K,GAAA,EAAD,CAAOC,UAAWC,KAAOzC,SAAU,CAAC0C,MAAWzI,KAAK,WAAW0I,YAAY,WAAW/K,KAAK,cAEhG,6BAAK,kBAAC2K,GAAA,EAAD,CAAOC,UAAWC,KAAOxI,KAAK,aAAarC,KAAK,aAArD,gBACCiE,GAAc,yBAAKmD,IAAKnD,EAAYsD,IAAI,YACxCtD,GAAc,kBAAC0G,GAAA,EAAD,CAAOC,UAAWC,KAAOE,YAAY,2BAA2B1I,KAAK,eAAe+F,SAAU,CAAC0C,QAC7GJ,GAAS,yBAAK3H,UAAWC,KAAQgI,kBAAmBN,GACrD,6BACI,8CCkBCvM,gBALS,SAACL,GAAD,MAA8C,CAClEmG,WAAYnG,EAAME,KAAKiG,WACvBlG,OAAQD,EAAME,KAAKD,UAGiB,CAACgG,MbSlB,SAACN,EAAeC,EAAkBC,EAAqBsH,GAAvD,8CACrB,WAAOvK,GAAP,iBAAAC,EAAA,sEACuB6C,EAAcC,EAAOC,EAAUC,EAAYsH,GADlE,QACUpM,EADV,QAEaiC,aAAec,IAAY2C,QAEhC7D,EAAS2D,MAGLxF,EAAKiC,aAAee,IAAqBqJ,mBACzCxK,EAAS8D,KAIT2G,EAAetM,EAAKyC,SAASE,OAAS,EAAI3C,EAAKyC,SAAS,GAAK,gBAEjEZ,EAASW,YAAW,QAAS,CAAC+J,OAAQD,MAd9C,2CADqB,wDaTRhN,EApB6C,SAACC,GAMzD,OAAGA,EAAML,OACE,kBAAC,IAAD,CAAUO,GAAI,aAElB,6BACH,qCACA,kBAACgM,GAAD,CAAgBjC,SATH,SAACpJ,GACdb,EAAM2F,MAAM9E,EAASwE,MAAOxE,EAASyE,SAAUzE,EAAS0E,WAAY1E,EAASgM,eAQzChH,WAAY7F,EAAM6F,iB,wCCrB1DoH,GAAcC,aAAgB,CAC9BC,YAAazL,KACb0L,YAAahJ,KACbwG,UXEuB,WAAkE,IAAjElL,EAAgE,uDAAxDyB,EAAcQ,EAA0C,uCACxF,OAAQA,EAAOC,MACX,IAAK,cAED,OAAO,eACAlC,EADP,CAEImH,UAAWnH,EAAMmH,UAAU0B,KAAI,SAAAkC,GAC3B,OAAIA,EAAEpJ,KAAOM,EAAOvB,OAET,eAAIqK,EAAX,CAAcrB,UAAU,IAErBqB,OAGnB,IAAK,gBACD,OAAO,eACA/K,EADP,CAEImH,UAAWnH,EAAMmH,UAAU0B,KAAI,SAAAkC,GAC3B,OAAIA,EAAEpJ,KAAOM,EAAOvB,OACT,eAAIqK,EAAX,CAAcrB,UAAU,IAErBqB,OAGnB,IAAK,iBAED,OAAO,eACA/K,EADP,CAEImH,UAAWlF,EAAOgK,eAE1B,IAAK,wBACD,OAAO,eAAIjM,EAAX,CAAkB+G,YAAa9E,EAAO+J,aAC1C,IAAK,kBACD,OAAO,eAAIhM,EAAX,CAAkBqC,OAAQJ,EAAOoE,UACrC,IAAK,6BACD,OAAO,eACArG,EADP,CAEIoH,gBAAiBnF,EAAOmF,kBAEhC,IAAK,wBACD,OAAO,eACApH,EADP,CAEIkG,UAAWjE,EAAOiE,YAE1B,IAAK,iCACD,OAAO,eACAlG,EADP,CAEIqH,sBAAuBpF,EAAOoF,sBAAP,sBAEbrH,EAAMqH,uBAFO,CAEgBpF,EAAOvB,SAGxC,CAACV,EAAMqH,sBAAsBhF,QAAO,SAACV,GAAD,OAAQA,IAAOM,EAAOvB,aAExE,QACI,OAAOV,IWxDfE,KdCuB,WAAkE,IAAjEF,EAAgE,uDAAxDyB,EAAcQ,EAA0C,uCACxF,OAAQA,EAAOC,MACX,IAAK,gBACL,IAAK,0BACD,OAAO,eACAlC,EADP,GAEOiC,EAAOoE,SAElB,IAAK,wBACD,OAAO,eACArG,EADP,CAEIkG,UAAWjE,EAAOiE,YAE1B,QACI,OAAOlG,Icdf2N,IbVsB,WAAkE,IAAjE3N,EAAgE,uDAAxDyB,EAAcQ,EAA0C,uCACvF,OAAQA,EAAOC,MACX,IAAK,2BACD,OAAO,eACAlC,EADP,CAEI4G,eAAe,IAGvB,QACI,OAAO5G,IaGf0M,KAAMkB,OAOJC,GAAmBC,OAAOC,sCAAwClC,KAC3DmC,GAAQC,aAAYV,GAAYM,GAAkBK,aAAgBC,QCrBxE,SAASC,GAAmBhO,GAE/B,OAAO,SAACE,GAAD,OAAgB,kBAAC,IAAM+N,SAAP,CAAgBC,SAAU,kBAAC3C,GAAA,EAAD,OAC7C,kBAACvL,EAAqBE,KD0B9BwN,OAAOE,MAAQA,G,wBE/BFO,GAAU,WACnB,OACE,yBAAKtJ,UAAWuJ,KAAEC,OACd,yBAAKxJ,UAAWuJ,KAAEE,GACd,yBAAKzJ,UAAWuJ,KAAEG,MAAlB,OACA,6BACA,yBAAK1J,UAAWuJ,KAAEI,IAAlB,YACA,yBAAK3J,UAAWuJ,KAAEK,IAAlB,iBACA,uBAAG5J,UAAWuJ,KAAEM,IAAKC,KAAK,aAA1B,sBCSRC,GAAmB7E,IAAM8E,MAAK,kBAAM,iCACpCC,GAAmB/E,IAAM8E,MAAK,kBAAM,iCAEpCE,GAAmBf,GAAaY,IAChCI,GAAmBhB,GAAac,IAMhCG,G,4MACFC,wBAA0B,SAACC,GAEvBtM,MAAM,wB,kEAINyI,KAAKpL,MAAMkP,kBACX1B,OAAO2B,iBAAiB,qBAAsB/D,KAAK4D,2B,6CAKnDxB,OAAO4B,oBAAoB,qBAAsBhE,KAAK4D,2B,+BAKtD,OAAK5D,KAAKpL,MAAMsG,cAMd,yBAAK3B,UAAU,eACX,kBAAC,GAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,uBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO0K,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,kBAAC,IAAD,CAAUrP,GAAI,gBACpD,kBAAC,IAAD,CAAOoP,KAAK,WACLC,OAAQ,kBAAM,kBAACV,GAAD,SACrB,kBAAC,IAAD,CAAOS,KAAK,oBACLC,OAAQ,kBAAM,kBAACT,GAAD,SACrB,kBAAC,IAAD,CAAOQ,KAAK,SACLC,OAAQ,kBAAM,kBAAC,GAAD,SACrB,kBAAC,IAAD,CAAOD,KAAK,QAAQ9C,UAAWvH,IAC/B,kBAAC,IAAD,CAAOqK,KAAK,SAAS9C,UAAWtH,IAChC,kBAAC,IAAD,CAAOoK,KAAK,YAAY9C,UAAWrH,IAEnC,kBAAC,IAAD,CAAOmK,KAAK,SAAS9C,UAAWgD,KAChC,kBAAC,IAAD,CAAOF,KAAM,OAAQC,OAAQ,kBAAM,kBAAC,GAAD,SACnC,kBAAC,IAAD,CAAUE,KAAM,IAAKvP,GAAI,YAvB5B,kBAACmL,GAAA,EAAD,U,GAnBDxB,IAAMyB,WAwDpBoE,GAAenE,aACjBoE,IACA5P,aANsB,SAACL,GAAD,MAA2B,CAC/C4G,cAAe5G,EAAM2N,IAAI/G,iBAKF,CAAC4I,gBhBhEG,WAC3B,OAAO,SAAC5M,GAEJ,IAAIsN,EAAUtN,EAAS2D,KAEvB3C,QAAQuM,IAAI,CAACD,IACVrP,MAAK,WAEF+B,EAXiC,CAACV,KAAM,oCgBiEnC2J,CAE6CwD,IAGnDe,GAAc,kBAEzB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUpC,MAAOA,IACb,kBAACgC,GAAD,SC1FVK,IAASR,OACL,kBAAC,GAAD,MACA/D,SAASwE,eAAe,U,mBCN5BlM,EAAOC,QAAU,CAAC,YAAc,+CAA+C,MAAQ,yCAAyC,iBAAmB,sD,mBCAnJD,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,EAAI,mBAAmB,KAAO,sBAAsB,GAAK,oBAAoB,GAAK,oBAAoB,KAAO,sBAAsB,IAAM,qBAAqB,MAAQ,yB,gCCDvN,0FAIasH,EAAsB,kBAAM,yBAAK1G,UAAWwD,IAAO8H,kBAC5D,yBAAKjH,IAAKkH,IAAW/G,IAAK,yB,iJCAjBgH,EAAkC,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASrQ,EAAW,gCAElEsQ,EAAWD,EAAKE,SAAWF,EAAK/D,MACtC,OAAO,yBAAK3H,UAAWC,IAAQ4L,YAAc,KAAOF,EAAW1L,IAAQ0H,MAAQ,KAC3E,8CAAc8D,EAAWpQ,IACxBsQ,GAAY,8BAAOD,EAAK/D,SAIpBG,EAA+B,SAAC,GAA6B,IAA5B2D,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASrQ,EAAW,gCAE/DsQ,EAAWD,EAAKE,SAAWF,EAAK/D,MACtC,OAAO,yBAAK3H,UAAWC,IAAQ4L,YAAc,KAAOF,EAAW1L,IAAQ0H,MAAQ,KAC3E,2CAAW8D,EAAWpQ,IACrBsQ,GAAY,8BAAOD,EAAK/D,U,gCCnBjC,oEAIO,IAAMI,EAA+B,SAACpC,GAAD,OAAWA,OAAQmG,EAAY,qBAM9DC,EAAmB,SAACC,GAC7B,OAAO,SAACrG,GAAD,OAAWA,EAAMlH,OAASuN,EAAf,wBAA4CA,EAA5C,iBAAkEF,K,mBCVxF3M,EAAOC,QAAU,CAAC,UAAY,6BAA6B,KAAO,wBAAwB,aAAe,kC,mBCAzGD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,8B","file":"static/js/main.a647c97d.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {RootStateType} from \"../redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = { isAuth: boolean }\r\ntype MapDispatchPropsType = {}\r\n//берет только то, что нужно redirect, чтобы сделать его уникальным\r\nlet mapStateToPropsForRedirect = (state: RootStateType) => ({isAuth: state.auth.isAuth})\r\n\r\n//WCP wrapped component props\r\n// Обертвываем приходящую компоненту в логику с Redirect\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n        //забираем isAuth из props, чтобы не передавать его в WrappedComp\r\n        let {isAuth, ...restProps} = props\r\n        //если не залогинен, то редирект на логин\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        //возвращаем пришедший компонент с его пропсами\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n    //юзаем коннект только с половиной стейта\r\n    return connect<MapStatePropsType, MapDispatchPropsType, WCP, RootStateType>(\r\n      mapStateToPropsForRedirect, {})\r\n    (RedirectComponent);\r\n}","import {PhotosType, ProfileType} from '../types/commonTypes'\r\nimport {instance, ApiResponseType} from './api'\r\n\r\ntype UploadPhotosDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n          .then(res => res.data)\r\n    },\r\n    getUserStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n          .then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ApiResponseType>(`profile/status`, {status})\r\n          .then(res => res.data)\r\n    },\r\n    uploadPhoto(photoFile: File) {\r\n        //формируем объект с файлом\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<ApiResponseType<UploadPhotosDataType>>(`profile/photo`, formData, {\r\n            //меня тип отправляемых данных с json на формдату\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        })\r\n          .then(response => response.data)\r\n    },\r\n    updateProfile(changedProfile: ProfileType) {\r\n        return instance.put<ApiResponseType>(`profile`, changedProfile)\r\n          .then(res => res.data)\r\n    },\r\n}","import {v1} from \"uuid\"\r\nimport {FormAction, stopSubmit} from \"redux-form\"\r\nimport {PhotosType, PostType, ProfileType, BaseThunkType} from \"../types/commonTypes\"\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\nconst initialState = {\r\n    postsData: [\r\n        {id: v1(), message: \"Hi, how are you?\", likesCount: 7},\r\n        {id: v1(), message: \"It's my first post\", likesCount: 53},\r\n        {id: v1(), message: \"КУ\", likesCount: 3},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'PROFILE/ADD_POST':\r\n            let newPost = {id: v1(), message: action.newPostText, likesCount: 0};\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost]\r\n            }\r\n        case 'PROFILE/DELETE_POST':\r\n            return {\r\n                ...state,\r\n                postsData: state.postsData.filter(post => post.id !== action.postId)\r\n            }\r\n        case 'PROFILE/SET_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case 'PROFILE/SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {\r\n                ...state,\r\n                //меняем только объект с фотками\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// actions\r\nexport const addPostAC = (newPostText: string) => ({type: 'PROFILE/ADD_POST', newPostText} as const)\r\nexport const deletePostAC = (postId: string) => ({type: 'PROFILE/DELETE_POST', postId} as const)\r\nexport const setProfileAC = (profile: ProfileType) => ({type: 'PROFILE/SET_PROFILE', profile} as const)\r\nexport const setStatusAC = (status: string) => ({type: 'PROFILE/SET_STATUS', status} as const)\r\nexport const savePhotosSuccessAC = (photos: PhotosType) => ({type: 'PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\r\n\r\n\r\n// thunks\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId)\r\n    dispatch(setProfileAC(data))\r\n}\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getUserStatus(userId)\r\n    dispatch(setStatusAC(data))\r\n}\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        const data = await profileAPI.updateStatus(status)\r\n        if (data.resultCode === 0) {\r\n            dispatch(setStatusAC(status))\r\n        }\r\n    } catch (error) {\r\n        alert(error)\r\n    }\r\n}\r\nexport const updatePhoto = (photo: File): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.uploadPhoto(photo)\r\n    if (data.resultCode === 0) {\r\n        dispatch(savePhotosSuccessAC(data.data.photos))\r\n    }\r\n}\r\nexport const updateProfile = (changedProfile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.updateProfile(changedProfile)\r\n    if (data.resultCode === 0) {\r\n        //because in initState userId = null\r\n        if (userId)\r\n          //т.к серв не возвращает обновленный профиль, то диспатчим санку для его получения\r\n            dispatch(getUserProfile(userId))\r\n        else\r\n            throw new Error('userId can\\'t be a null')\r\n    } else {\r\n        //в чейне выбираем из строки ошибки с сервера название нужного поля, в котором она происходит\r\n        dispatch(stopSubmit('edit-profile', {'contacts': {[data.messages[0].substring(30, data.messages[0].length - 1).toLowerCase()]: data.messages[0]}}))\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n}\r\n// types\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType =\r\n  | ReturnType<typeof addPostAC>\r\n  | ReturnType<typeof deletePostAC>\r\n  | ReturnType<typeof setProfileAC>\r\n  | ReturnType<typeof setStatusAC>\r\n  | ReturnType<typeof savePhotosSuccessAC>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\n","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": 'a13d3464-2e9e-4272-8cbf-d0d1a9048e02'\r\n    }\r\n})\r\n//default values, so we may not specify when it's not necessary.\r\nexport type ApiResponseType<D = {}, RS = ResultCodes> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RS\r\n}\r\nexport type GetItemsType<T> = {\r\n    items: T\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\n\r\n//only several requests may need captcha\r\nexport enum ResultCodes { Success = 0, Error = 1,}\r\nexport enum ResultCodeForCaptcha { CaptchaIsRequired = 10}\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/default-user-avatar.7d927e67.svg\";","import {v1} from 'uuid'\r\nimport {DialogItemType, MessageType} from \"../types/commonTypes\";\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: \"Chris\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/9/99/Chris_Pratt_2018.jpg\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Vicky\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/c/cf/Victoria_Justice_2013.jpg\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Mike\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Mike_Tyson_2019_by_Glenn_Francis.jpg/1200px-Mike_Tyson_2019_by_Glenn_Francis.jpg\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Alex\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/9/99/Chris_Pratt_2018.jpg\"\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Ivan\",\r\n            avatar: \"https://upload.wikimedia.org/wikipedia/commons/9/99/Chris_Pratt_2018.jpg\"\r\n        },\r\n    ] as Array<DialogItemType>,\r\n    messagesData: [\r\n        {id: v1(), message: \"Hello\"},\r\n        {id: v1(), message: \"What's up\"},\r\n        {id: v1(), message: \"Privet\"},\r\n        {id: v1(), message: \"Yo\"},\r\n        {id: v1(), message: \"Yo\"},\r\n    ] as Array<MessageType>,\r\n};\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_MESSAGE':\r\n            let newMessage = {id: v1(), message: action.newMessageText}\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, newMessage]\r\n                //эта запись перезатирает shallow-копию messagesData\r\n                //массив messagesData содержит объекты, мы их глубоко не копируем, т.к. не изменяем\r\n                //dialogsData глубоко не копируем, не собираемся изменять\r\n            };\r\n        case 'DELETE_MESSAGE':\r\n            return {\r\n                ...state,\r\n                messagesData: state.messagesData.filter(mess => mess.id !== action.messageId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const addMessageAC = (newMessageText: string) => ({type: 'ADD_MESSAGE', newMessageText} as const)\r\nexport const deleteMessageAC = (messageId: string) => ({type: 'DELETE_MESSAGE', messageId} as const)\r\n\r\n// types\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType =\r\n  | ReturnType<typeof addMessageAC>\r\n  | ReturnType<typeof deleteMessageAC>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__2-U6B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinnerContainer\":\"Preloader_spinnerContainer__2hnql\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.dacce764.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3jGhs\",\"item\":\"Navbar_item__L_aKq\",\"activeLink\":\"Navbar_activeLink__NrhWw\"};","import React from 'react';\r\nimport classes from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar: React.FC = () => <nav className={classes.nav}>\r\n    <div className={classes.item}>\r\n        <NavLink to=\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n    </div>\r\n    <div className={classes.item}>\r\n        <NavLink to=\"/dialogs\" activeClassName={classes.activeLink}>Dialogs</NavLink>\r\n    </div>\r\n    <div className={classes.item}>\r\n        <NavLink to=\"/users\" activeClassName={classes.activeLink}>Users</NavLink>\r\n    </div>\r\n    <div className={classes.item}>\r\n        <NavLink to=\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n    </div>\r\n    <div className={classes.item}>\r\n        <NavLink to=\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n    </div>\r\n    <div className={classes.item}>\r\n        <NavLink to=\"/settings\" activeClassName={classes.activeLink}>Settings</NavLink>\r\n    </div>\r\n</nav>;\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport classes from \"./News.module.css\";\r\n\r\nconst News: React.FC = () => (\r\n  <div>\r\n      News\r\n  </div>\r\n);\r\n\r\nexport default News;","import React from \"react\";\r\nimport classes from \"./Music.module.css\";\r\n\r\nfunction Music(props: any) {\r\n  return (\r\n    <div>\r\n      Music\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport classes from \"./Settings.module.css\";\r\n\r\nfunction Settings(props: any) {\r\n  return (\r\n    <div>\r\n      Settings\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings;","import {instance, ApiResponseType, ResultCodeForCaptcha, ResultCodes} from \"./api\";\r\n\r\ntype MeResponseDataType = {id: number, email: string, login: string}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ApiResponseType<MeResponseDataType>>(`auth/me`).then((res) => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<ApiResponseType<{userId: number}, ResultCodes | ResultCodeForCaptcha>>('auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        }).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login').then(res => res.data)\r\n    }\r\n}","import {instance} from './api'\r\n\r\ntype GetCaptchaUrl = {url: string}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrl>(`security/get-captcha-url`).then(res => res.data)\r\n    }\r\n}","import {ResultCodeForCaptcha, ResultCodes} from \"../api/api\"\r\nimport {Dispatch} from \"redux\"\r\nimport {FormAction, stopSubmit} from \"redux-form\"\r\nimport {toggleIsLoadingAC} from \"./app-reducer\"\r\nimport {authAPI} from \"../api/auth-api\"\r\nimport {securityAPI} from \"../api/security-api\"\r\nimport {BaseThunkType} from \"../types/commonTypes\"\r\n\r\nconst initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isLoading: false,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null, // if null captcha is not required\r\n};\r\nexport const authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_USER_DATA':\r\n        case 'GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case 'APP/TOGGLE_IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserDataAC = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n  ({type: 'SET_USER_DATA', payload: {userId, email, login, isAuth}} as const)\r\nexport const getCaptchaUrlSuccessAC = (captchaUrl: string) =>\r\n  ({type: 'GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const)\r\n\r\n\r\nexport const getAuthUserDataTC = (): ThunkType =>\r\n  async (dispatch: Dispatch) => {\r\n      //возвращаем промис внаружу, диспатч TC вернет этот промис в app-reducer\r\n      const meData = await authAPI.me()\r\n      if (meData.resultCode === ResultCodes.Success) {\r\n          let {id, email, login} = meData.data;\r\n          //axios упаковывает в data и разраб сервера упаковал в data\r\n          dispatch(setAuthUserDataAC(id, email, login, true))\r\n      }\r\n  }\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean, captchaInput: string): ThunkType =>\r\n  async (dispatch) => {\r\n      const data = await authAPI.login(email, password, rememberMe, captchaInput);\r\n      if (data.resultCode === ResultCodes.Success) {\r\n          //запускаем санку получения данных юзера с серва, если успешная логинизация\r\n          dispatch(getAuthUserDataTC())\r\n      } else {\r\n          // captcha\r\n          if (data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n              dispatch(getCaptchaUrlTC())\r\n          }\r\n          //если resultCode !== 0, то останавливаем сабмит формы\r\n          //проверяем не пустой ли массив с сообщ. об ошибке\r\n          let errorMessage = data.messages.length > 0 ? data.messages[0] : 'Unknown error'\r\n          //1 арг. название именно <form/>, вторым объект с проблемным полем (_error для всех сразу field)\r\n          dispatch(stopSubmit(\"login\", {_error: errorMessage}))\r\n      }\r\n  }\r\nexport const getCaptchaUrlTC = (): ThunkType =>\r\n  async (dispatch) => {\r\n      const data = await securityAPI.getCaptchaUrl()\r\n      const captchaUrl = data.url\r\n      dispatch(getCaptchaUrlSuccessAC(captchaUrl))\r\n  }\r\nexport const logoutTC = (): ThunkType => async (dispatch) => {\r\n    const data = await authAPI.logout()\r\n    if (data.resultCode === 0) {\r\n        //удаляем всю информацю из стейта о юзере в исходное состояние (initState)\r\n        dispatch(setAuthUserDataAC(null, null, null, false))\r\n    }\r\n}\r\n\r\n// types\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType =\r\n  | ReturnType<typeof setAuthUserDataAC>\r\n  | ReturnType<typeof getCaptchaUrlSuccessAC>\r\n  | toggleIsLoadingAC\r\ntype ThunkType = BaseThunkType<ActionsType\r\n  //extra actions\r\n  | FormAction>","import {getAuthUserDataTC} from \"./auth-reducer\";\r\nimport {BaseThunkType} from \"../types/commonTypes\";\r\n\r\n\r\nconst initialState = {isInitialized: false};\r\n\r\nexport const appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/INITIALIZING_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isInitialized: true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const toggleIsLoadingAC = (isLoading: boolean) => ({type: 'APP/TOGGLE_IS_LOADING', isLoading} as const)\r\nexport const setInitializingSuccessAC = () => ({type: 'APP/INITIALIZING_SUCCESS'} as const)\r\n\r\n// thunks\r\nexport const initializeAppTC = (): ThunkType => {\r\n    return (dispatch) => {\r\n        //dispatch Не только что-то диспатчит, но и умеет возвращать что-то, что напишем в ретурне санки(или async await сам по себе ретурнит его??)\r\n        let promise = dispatch(getAuthUserDataTC())\r\n        //all ждет пока зарезолвятся все промисы из массива\r\n        Promise.all([promise])\r\n          .then(() => {\r\n              //когда приходит инфа о том, что юзер авторизован(или нет), диспатчим в бизнес initialSuccess\r\n              dispatch(setInitializingSuccessAC())\r\n          })\r\n    }\r\n}\r\n\r\n// types\r\nexport type InitialStateType = typeof initialState\r\nexport type toggleIsLoadingAC = ReturnType<typeof toggleIsLoadingAC>\r\ntype ActionsType = ReturnType<typeof setInitializingSuccessAC>\r\ntype ThunkType = BaseThunkType<ActionsType, void>\r\n","import {GetItemsType, instance, ApiResponseType} from './api'\r\nimport {UserType} from '../types/commonTypes'\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, searchInput = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType<Array<UserType>>>(`users?page=${currentPage}&count=${pageSize}&term=${searchInput}` + (friend === null ? '' : `&friend=${friend}`))\r\n          //тут промис зен, чтобы в компоненту приходил ответ только с data\r\n          .then(res => res.data)\r\n    },\r\n    //в get и delete настройки 2 параметр, в post 3-ий\r\n    followUser(userId: number) {\r\n        return instance.post<ApiResponseType>(`follow/${userId}`, {})\r\n          .then(res => res.data)\r\n    },\r\n    unfollowUser(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n          .then(res => res.data) as Promise<ApiResponseType>\r\n    }\r\n}","import {BaseThunkType, UserType} from '../types/commonTypes'\r\nimport {toggleIsLoadingAC} from './app-reducer'\r\nimport {usersAPI} from '../api/user-api'\r\n\r\nconst initialState = {\r\n    usersData: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    isFollowingInProgress: [] as Array<number>, // array of users Ids\r\n    filter: {\r\n        searchInput: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\nexport const userReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'USER/FOLLOW':\r\n            //этот мап делает копию только того юзера, который нужно изменить, остальное ссылки (Shallow)\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        //делаем копию только того юзера, которого меняем\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case 'USER/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case 'USER/SET_USERS':\r\n            //Дополняет инитстейт новыми юзерами, приходящими с сервака по нажатию кнопки show more\r\n            return {\r\n                ...state,\r\n                usersData: action.newUsersData\r\n            }\r\n        case 'USER/SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.pageNumber}\r\n        case 'USER/SET_FILTER':\r\n            return {...state, filter: action.payload}\r\n        case 'USER/SET_TOTAL_USERS_COUNT':\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        case 'APP/TOGGLE_IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        case 'USER/TOGGLE_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                isFollowingInProgress: action.isFollowingInProgress\r\n                    //если в action isFollowing true, то в конец массива айдишек(которые были нажаты) дописываем айди из action\r\n                    ? [...state.isFollowingInProgress, action.userId]\r\n                    //если false, то деструкт. не нужна, фильтр возвр. новый массив\r\n                    //удаляет из массивы обрабатывающихся id, ту, что закончила обработку\r\n                    : [state.isFollowingInProgress.filter((id) => id !== action.userId)]\r\n            } as InitialStateType\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const followSuccessAC = (userId: number) => ({type: 'USER/FOLLOW', userId} as const)\r\nexport const unfollowSuccessAC = (userId: number) => ({type: 'USER/UNFOLLOW', userId: userId} as const)\r\nexport const setUsersAC = (newUsersData: Array<UserType>) => ({type: 'USER/SET_USERS', newUsersData} as const)\r\nexport const setCurrentPageAC = (pageNumber: number) => ({type: 'USER/SET_CURRENT_PAGE', pageNumber} as const)\r\n//filter of searching users\r\nexport const setFilterAC = (filter: FilterType) => ({type: 'USER/SET_FILTER', payload: filter} as const)\r\nexport const setTotalUsersCountAC = (totalUsersCount: number) => ({\r\n    type: 'USER/SET_TOTAL_USERS_COUNT', totalUsersCount\r\n} as const)\r\nexport const toggleFollowingProgressAC = (isFollowingInProgress: boolean, userId: number) => ({\r\n    type: 'USER/TOGGLE_FOLLOWING_PROGRESS', isFollowingInProgress,\r\n    userId\r\n} as const)\r\n\r\n// thunks\r\n//AC возвращает объект, кот. мы можем задиспатчить, ThunkCreator возвр. функцию кот. мы можем задиспатчить\r\nexport const requestUsersTC = (currentPage: number, pageSize: number, filter: FilterType): BaseThunkType<ActionsType> =>\r\n    async (dispatch) => {\r\n        document.title = 'Users'\r\n        //включаем крутилку до запроса на серв\r\n        dispatch(toggleIsLoadingAC(true))\r\n        const data = await usersAPI.getUsers(currentPage, pageSize, filter.searchInput, filter.friend)\r\n        //после ответа сервера выполнится этот код\r\n        dispatch(setFilterAC(filter))\r\n        dispatch(setCurrentPageAC(currentPage))\r\n        dispatch(setUsersAC(data.items))\r\n        dispatch(setTotalUsersCountAC(data.totalCount))\r\n        //выключаем после получения ответа\r\n        dispatch(toggleIsLoadingAC(false))\r\n    }\r\n\r\nexport const followTC = (userId: number): BaseThunkType<ActionsType> =>\r\n    async (dispatch) => {\r\n        //меняет в стейте дизаблед кнопки на тру\r\n        dispatch(toggleFollowingProgressAC(true, userId))\r\n        const data = await usersAPI.followUser(userId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(followSuccessAC(userId))\r\n        }\r\n        //разблочивает кнопку после запроса\r\n        dispatch(toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\nexport const unfollowTC = (userId: number): BaseThunkType<ActionsType> =>\r\n    async (dispatch) => {\r\n        //меняет в стейте дизаблед кнопки на тру\r\n        dispatch(toggleFollowingProgressAC(true, userId))\r\n        //дожидаемся когда промис придет в состояние resolved\r\n        const data = await usersAPI.unfollowUser(userId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(unfollowSuccessAC(userId))\r\n        }\r\n        //разблочивает кнопку после запроса\r\n        dispatch(toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType =\r\n    | ReturnType<typeof followSuccessAC>\r\n    | ReturnType<typeof unfollowSuccessAC>\r\n    | ReturnType<typeof setUsersAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setTotalUsersCountAC>\r\n    | ReturnType<typeof toggleFollowingProgressAC>\r\n    | toggleIsLoadingAC\r\n    | ReturnType<typeof setFilterAC>\r\n","import styles from './Paginator.module.css';\r\nimport React, {useState, FC} from 'react';\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPageNumber: number\r\n    onPageChanger: (page: number) => void\r\n    portionSize: number\r\n}\r\n\r\nexport const Paginator: FC<PropsType> = (props) => {\r\n    //логика для визуала, поэтому она в презентационной компоненте\r\n    //делим общее количество юзеров на то, сколько их будет в 1 порции, получаем количество страниц\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n    //массив с нумерацией страниц\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    //количество порций = количество страниц / размер порции\r\n    let portionCount = Math.ceil(pagesCount / props.portionSize)\r\n    //локал стейт для кнопок prev/next для переключения порций\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    //находим левую/правую пограничную страницу в порции\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * props.portionSize;\r\n\r\n    return (\r\n      <div className={styles.paginator}>\r\n          {// если номер показываемой порции больше 1, то показать кнопку Prev с онкликом изменить номер показываемой порции на -1\r\n              portionNumber > 1\r\n                ? <button onClick={() => setPortionNumber(portionNumber - 1)}>Previous</button>\r\n                : null}\r\n          {pages\r\n            //находим нужную порцию по пограничным страницам порции\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map(p =>\r\n              <span key={Math.random()} className={props.currentPageNumber === p ? styles.selectedPage : styles.page}\r\n                    onClick={() => {\r\n                        props.onPageChanger(p)\r\n                    }}>{p}</span>\r\n            )}\r\n          {//если общее количество порций больше, чем текущая порция, то показать кнопку Next\r\n              // с онкликом изменить номер показываемой порции на +1\r\n              portionCount > portionNumber\r\n                ? <button onClick={() => setPortionNumber(portionNumber + 1)}>Next</button>\r\n                : null}\r\n      </div>\r\n    )\r\n}","import styles from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/default-user-avatar.svg\";\r\nimport React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { UserType } from \"../../types/commonTypes\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    isFollowedInProgress: Array<number>\r\n}\r\n\r\nexport const User: React.FC<PropsType> = ({user, ...props}) => (\r\n    <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + user.id}>\r\n                            <img\r\n                                src={\r\n                                    /*если фото отсутствует, то стандартная картинка*/\r\n                                    user.photos.small != null ? user.photos.small : userPhoto}\r\n                                className={styles.userPhoto}\r\n                                alt={\"avatar\"}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed ?\r\n                            //если хоть кто-то из массива обрабатывающихся id совпадает с user id по которым мапимся, то true в disabled\r\n                            <button disabled={props.isFollowedInProgress.some((id) => id === user.id)}\r\n                                    onClick={() => {\r\n                                        //меняет в стейте дизаблед кнопки на тру\r\n                                        props.unfollow(user.id)\r\n                                    }}>Unfollow</button>\r\n                            : <button disabled={props.isFollowedInProgress.some((id) => id === user.id)}\r\n                                      onClick={() => {\r\n                                          props.follow(user.id)\r\n                                      }}>Follow</button>\r\n                        }</div>\r\n                        </span>\r\n        <span>\r\n                        <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                        </span>\r\n            {/*<button onClick={() => {*/}\r\n            {/*    this.props.setUsers()*/}\r\n            {/*}}>Show more</button>*/}\r\n\r\n                        </span>\r\n    </div>\r\n)","import React from 'react'\r\nimport {Field, Form, Formik} from 'formik'\r\nimport {FilterType} from '../../redux/users-reducer'\r\n\r\ntype PropsType = {\r\n    onFilterChanger: (filter: FilterType) => void\r\n}\r\n\r\nconst formValidation = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n    const submit = (values: FilterType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        debugger\r\n        props.onFilterChanger(values)\r\n        setSubmitting(false)\r\n    }\r\n    return <Formik\r\n        initialValues={{searchInput: '', friend: null}}\r\n        validate={formValidation}\r\n        onSubmit={submit}\r\n    >\r\n        {({isSubmitting}) => (\r\n            <Form>\r\n                <Field type=\"text\" name=\"searchInput\"/>\r\n                <Field name=\"friend\" as=\"select\">\r\n                    <option value=\"null\">All</option>\r\n                    <option value=\"true\">Friends</option>\r\n                    <option value=\"false\">Unfollowed</option>\r\n                </Field>\r\n                <button type=\"submit\" disabled={isSubmitting}>\r\n                    Search\r\n                </button>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n})","import React, {FC} from 'react'\r\nimport {Paginator} from '../common/Paginator/Paginator'\r\nimport {User} from './User'\r\nimport {UserType} from '../../types/commonTypes'\r\nimport {UsersSearchForm} from './UsersSearchForm'\r\nimport {FilterType} from '../../redux/users-reducer'\r\n\r\nexport type PropsType = {\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    isFollowedInProgress: Array<number> // array of users Ids\r\n    onPageChanger: (page: number) => void\r\n    onFilterChanger: (filter: FilterType) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n}\r\n\r\nexport const UsersList: FC<PropsType> = (props) => (\r\n    <div>\r\n        <UsersSearchForm onFilterChanger={props.onFilterChanger}/>\r\n        <Paginator totalItemsCount={props.totalUsersCount}\r\n                   pageSize={props.pageSize}\r\n                   currentPageNumber={props.currentPage}\r\n                   onPageChanger={props.onPageChanger}\r\n                   portionSize={10}/>\r\n        {\r\n            props.users.map(u => <User key={u.id}\r\n                                       user={u}\r\n                                       isFollowedInProgress={props.isFollowedInProgress}\r\n                                       follow={props.follow} unfollow={props.unfollow}/>\r\n            )\r\n        }\r\n    </div>\r\n)\r\n\r\n\r\n","//функция кот принимает State целиком, достает только то, что нужно компоненте и передаёт это в бизнес в mStP\r\n//это нужно, чтобы мы решим изменить архитектуру стейта, чтобы не исправлять в каждом mStP, мы исправим в 1 месте - здесь\r\nimport {RootStateType} from './store'\r\nimport {createSelector} from 'reselect'\r\n\r\n//примитивный селектор\r\nexport const getUsersSelector = (state: RootStateType) => state.usersPage.usersData\r\n//селектор с вычислениями, reselect предотвращает перерисовку ( useMemo ), кэшируя её значения и пересчитывает только при измен. в getUsersSelector\r\nexport const getUsers = createSelector(getUsersSelector, (users) => users.filter(u => true))\r\nexport const getPageSize = (state: RootStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: RootStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: RootStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsLoading = (state: RootStateType) => {\r\n    return state.usersPage.isLoading\r\n}\r\nexport const getIsFollowingProgress = (state: RootStateType) => {\r\n    return state.usersPage.isFollowingInProgress\r\n}\r\nexport const getUsersFilter = (state: RootStateType) => {\r\n    return state.usersPage.filter\r\n}","import {connect} from 'react-redux'\r\nimport {RootStateType} from '../../redux/store'\r\nimport {FilterType, followTC, requestUsersTC, unfollowTC} from '../../redux/users-reducer'\r\nimport React, {Component} from 'react'\r\nimport {UsersList} from './UsersList'\r\nimport {Preloader} from '../common/Preloader/Preloader'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {\r\n    getCurrentPage,\r\n    getIsFollowingProgress,\r\n    getIsLoading,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from '../../redux/users-selectors'\r\nimport {UserType} from '../../types/commonTypes'\r\n\r\ntype MapStatePropsType = {\r\n    //from mstp\r\n    users: Array<UserType>\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    isLoading: boolean\r\n    isFollowingInProgress: Array<number> // array of users Ids\r\n    filter: FilterType\r\n}\r\ntype MapDispatchPropsType = {\r\n    //from mdtp\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number, filter: FilterType) => void\r\n}\r\ntype OwnProps = {\r\n    //что передали непосредственно в пропсах\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnProps\r\n\r\nclass UsersContainer extends Component<PropsType> {\r\n    componentDidMount() {\r\n        //вызываем санку\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize, this.props.filter)\r\n    }\r\n\r\n    onPageChanger = (currentPage: number) => {\r\n        this.props.getUsers(currentPage, this.props.pageSize, this.props.filter)\r\n    }\r\n\r\n    onFilterChanger = (filter: FilterType) => {\r\n        this.props.getUsers(1, this.props.pageSize, filter)\r\n    }\r\n\r\n    render() {\r\n        //после return --- если идет запрос на сервак, то отобразить крутилку\r\n        return <>\r\n            {this.props.isLoading ? <Preloader/> : null}\r\n            <UsersList totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       follow={this.props.follow}\r\n                       unfollow={this.props.unfollow}\r\n                       onPageChanger={this.onPageChanger}\r\n                       onFilterChanger={this.onFilterChanger}\r\n                       users={this.props.users}\r\n                       isFollowedInProgress={this.props.isFollowingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStatePropsType => {\r\n    //принимает стейт целиком, а возвращает только то, что нужно компоненте\r\n    //выбираем стейт в селекторах, чтобы если что не менять все mstp, а поменять в 1 селекторе\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isLoading: getIsLoading(state),\r\n        isFollowingInProgress: getIsFollowingProgress(state),\r\n        filter: getUsersFilter(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnProps, RootStateType>(\r\n        mapStateToProps,\r\n        {follow: followTC, unfollow: unfollowTC, getUsers: requestUsersTC})\r\n)(UsersContainer)\r\n","import React from 'react';\r\nimport classes from \"./Header.module.css\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport type MapStatePropsType = {\r\n    isAuth: boolean\r\n    isLoading: boolean\r\n    login: string | null\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => <header className={classes.header}>\r\n    <img src=\"https://i.ibb.co/HN350sc/70a3b023-88a2-4ebb-a063-784ca54ae184-200x200.png\" alt=\"logo\"/>\r\n\r\n    <div className={classes.loginBlock}>\r\n        {props.isAuth\r\n          ? <div>{props.login} - <button onClick={props.logout}>Log Out</button></div> :\r\n          //показываем имя пользователя либо ссылку на страницу логина\r\n          <NavLink to={\"/login\"}>Login</NavLink>\r\n        }\r\n    </div>\r\n</header>;\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header, {MapDispatchPropsType, MapStatePropsType} from \"./Header\";\r\nimport {connect} from 'react-redux';\r\nimport {RootStateType} from \"../../redux/store\";\r\nimport {logoutTC} from \"../../redux/auth-reducer\";\r\n\r\nconst HeaderContainer: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    return <Header {...props}/>\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    isLoading: state.auth.isLoading,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, RootStateType>(mapStateToProps, {logout: logoutTC})(HeaderContainer);","//типизация redux-form\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\"\r\nimport React, { FC } from \"react\"\r\nimport {Input} from \"../../common/FormsWithValidationErrors/FormsWithValidationErrors\"\r\n//validator for Field from another file\r\nimport {required} from \"../../../utils/validators\";\r\nimport {LoginFormValuesType} from \"../Login\";\r\nimport classes from \"./../../common/FormsWithValidationErrors/FormsWithValidationErrors.module.css\";\r\n\r\ntype PropsType = { captchaUrl: string | null }\r\n\r\n//деструктуризация пропсов, достаем из них нужные айтемы, чтобы постоянно не писать props.error\r\nconst LoginForm: FC<InjectedFormProps<LoginFormValuesType, PropsType> & PropsType> = ({handleSubmit, error, captchaUrl}) => {\r\n      //handleSubmit прокинул HOC, он делает e.preventDefault, передает значения из инпутов наверх упакуя в объект\r\n      return <form onSubmit={handleSubmit}>\r\n          <div><Field component={Input} validate={[required]} name=\"email\" placeholder=\"Email\" type='email'/></div>\r\n          <div><Field component={Input} validate={[required]} name=\"password\" placeholder=\"Password\" type='password'/>\r\n          </div>\r\n          <div><Field component={Input} name=\"rememberMe\" type=\"checkbox\"/> remember me</div>\r\n          {captchaUrl && <img src={captchaUrl} alt='captcha'/>}\r\n          {captchaUrl && <Field component={Input} placeholder='Enter symbols from image' name='captchaInput' validate={[required]} />}\r\n          {error && <div className={classes.formSummaryError}>{error}</div>}\r\n          <div>\r\n              <button>Login</button>\r\n          </div>\r\n      </form>\r\n  }\r\n\r\n//HOC, оборачиваем им форму\r\nexport const LoginReduxForm = reduxForm<LoginFormValuesType, PropsType>({\r\n    //имя для этой формы\r\n    form: 'login'\r\n})(LoginForm)","import React, {FC} from \"react\"\r\nimport {connect} from \"react-redux\"\r\nimport {loginTC} from \"../../redux/auth-reducer\"\r\nimport {LoginReduxForm} from \"./LoginForm/LoginForm\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {RootStateType} from \"../../redux/store\"\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captchaInput: string\r\n}\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captchaInput: string) => void\r\n}\r\n\r\nconst Login: FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    //сюда придет инфа по инпутам, собранная handleSubmit {login: 'что ввел', rememberMe: true} и тд\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captchaInput)\r\n    }\r\n\r\n    if(props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login: loginTC})(Login)\r\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {dialogsReducer} from './dialogs-reducer';\r\nimport {userReducer} from './users-reducer';\r\nimport {authReducer} from './auth-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport {appReducer} from './app-reducer'\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: userReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    //redux-form\r\n    form: formReducer\r\n});\r\n\r\n\r\n//store for ReduxDevTools\r\n//расширение добавит в глобальный window __REDUX_D.., если его нет то обычный compose\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer,composeEnhancers( applyMiddleware(thunkMiddleware)));\r\n\r\n//обычный стор\r\n//export let store: Store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n\r\n//нужно для того, чтобы видеть store в консоли\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react'\r\nimport {Preloader} from \"../components/common/Preloader/Preloader\";\r\n\r\n//WCP - wrapped component props\r\n//HOC возвращает новую компоненту, а не JSX\r\nexport function withSuspense <WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    //для lazy, в fallback указываем компоненту, кот. будет показываться пока ждем загрузки\r\n    return (props: WCP) => <React.Suspense fallback={<Preloader/>}>\r\n        <WrappedComponent {...props}/>\r\n    </React.Suspense>\r\n}\r\n\r\n","import React from \"react\"\r\nimport s from \"./Page404.module.css\"\r\n\r\nexport const Page404 = () => {\r\n    return (\r\n      <div className={s.block}>\r\n          <div className={s.c}>\r\n              <div className={s._404}>404</div>\r\n              <hr/>\r\n              <div className={s._1}>THE PAGE</div>\r\n              <div className={s._2}>WAS NOT FOUND</div>\r\n              <a className={s.btn} href='#/profile'>BACK TO PROFILE</a>\r\n          </div>\r\n      </div>\r\n    )\r\n}","import React, {FC} from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {HashRouter, Route, withRouter, Switch, Redirect} from 'react-router-dom';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from './components/Login/Login';\r\nimport {connect, Provider} from 'react-redux';\r\nimport {initializeAppTC} from \"./redux/app-reducer\";\r\nimport {RootStateType, store} from \"./redux/store\";\r\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nimport {Page404} from './components/common/Page404/Page404';\r\n\r\n//компонента не попадает в бандл(вебпак собирает все файлы в 1), она будет в своем бандле и только когда она не понадобится\r\n//это ускоряет стартовую загрузку, но медленнее, когда перейдем к этой компоненте\r\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"))\r\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"))\r\n//чтобы не оборачивать при каждой перерисовке?\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = { initializingApp: () => void }\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        //server errors/offline\r\n        alert(\"Some error occurred\")\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializingApp()\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    // clear junk before comp dies\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        //we see preloader before compDidMount works\r\n        if (!this.props.isInitialized) {\r\n            return <Preloader/>\r\n        }\r\n        //В Profile /:userId param for withRouter props (60)\r\n        // ? after userId makes param optional, so if we haven't it in url, another profile will be uploaded(in component code)\r\n        return (\r\n          <div className='app-wrapper'>\r\n              <HeaderContainer/>\r\n              <Navbar/>\r\n              <div className=\"app-wrapper-content\">\r\n                  <Switch>\r\n                      <Route exact path={'/'} render={() => <Redirect to={\"/profile\"}/>}/>\r\n                      <Route path=\"/dialogs\"\r\n                             render={() => <SuspendedDialogs/>}/>\r\n                      <Route path=\"/profile/:userId?\"\r\n                             render={() => <SuspendedProfile/>}/>\r\n                      <Route path=\"/users\"\r\n                             render={() => <UsersContainer/>}/>\r\n                      <Route path=\"/news\" component={News}/>\r\n                      <Route path=\"/music\" component={Music}/>\r\n                      <Route path=\"/settings\" component={Settings}/>\r\n\r\n                      <Route path=\"/login\" component={Login}/>\r\n                      <Route path={'/404'} render={() => <Page404/>}/>\r\n                      <Redirect from={'*'} to={'/404'}/>\r\n                  </Switch>\r\n              </div>\r\n          </div>\r\n        )\r\n          ;\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    isInitialized: state.app.isInitialized\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter, //for taking URI-params\r\n  connect(mapStateToProps, {initializingApp: initializeAppTC}))(App)\r\n\r\n//made this component for correct work App.test\r\nexport const MainApp: FC = () => (\r\n  //HashRouter for github pages\r\n  <HashRouter>\r\n      <Provider store={store}>\r\n          <AppContainer/>\r\n      </Provider>\r\n  </HashRouter>\r\n)","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {MainApp} from './App';\r\n\r\nReactDOM.render(\r\n    <MainApp/>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsWithValidationErrors_formControl__8VE6q\",\"error\":\"FormsWithValidationErrors_error__3I0hX\",\"formSummaryError\":\"FormsWithValidationErrors_formSummaryError__68DeX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Page404_block__1a3GG\",\"c\":\"Page404_c__2ANwZ\",\"_404\":\"Page404__404__3yze_\",\"_1\":\"Page404__1__3qdCo\",\"_2\":\"Page404__2__2rNqX\",\"text\":\"Page404_text__GTBsp\",\"btn\":\"Page404_btn__2nqtV\",\"right\":\"Page404_right__3mVuj\"};","import styles from \"./Preloader.module.css\"\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader: React.FC = () => <div className={styles.spinnerContainer}>\r\n    <img src={preloader} alt={\"Preloader spinner\"}/>\r\n</div>;","import React, { FC } from \"react\"\r\nimport classes from \"./FormsWithValidationErrors.module.css\"\r\nimport {WrappedFieldProps} from \"redux-form\"\r\n\r\n//rest оператор, деструктуризацией достаем инпут, мета, а остальное оставить в пропсы\r\nexport const Textarea: FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    //если был в фокусе и не проходит валидатор.тс (в meta.error текст ошибки, либо null/undefined)\r\n    const hasError = meta.touched && meta.error\r\n    return <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\r\n        <textarea {...input} {...props}/>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    //если был в фокусе и не проходит валидатор.тс (в meta.error текст ошибки, либо null/undefined)\r\n    const hasError = meta.touched && meta.error\r\n    return <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\r\n        <input {...input} {...props}/>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n}","//common type\r\ntype FieldValidatorType = (value: string) => string | undefined\r\n\r\n//если пришло value, то undefined, else string\r\nexport const required: FieldValidatorType = (value) => value ? undefined : \"Field is required\"\r\n\r\n/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nт.к. не мы вызываем внутреннюю функцию, передать в неё помимо value maxLength вторым параметром нельзя, поэтому\r\nоборачиваем в функцию обертку и передаем в неё параметр\r\n(ЗАМЫКАНИЕ - фун возвр другую фун и эта внутренняя фун может юзать параметры(переменные и т.д.) внешней функции) */\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => {\r\n    return (value) => value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2TTw3\",\"page\":\"Paginator_page__IO0Pt\",\"selectedPage\":\"Paginator_selectedPage__1Iz0d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2wm1e\",\"loginBlock\":\"Header_loginBlock__1Oxrs\"};"],"sourceRoot":""}